// Generated by CoffeeScript 1.9.3
var Kanimarker;

Kanimarker = (function() {
  Kanimarker.prototype.map = null;

  Kanimarker.prototype.headingUp = false;

  Kanimarker.prototype.position = null;

  Kanimarker.prototype.direction = 0;

  Kanimarker.prototype.accuracy = 0;

  Kanimarker.prototype.moveAnimationState_ = null;

  Kanimarker.prototype.directionAnimationState_ = null;

  Kanimarker.prototype.accuracyAnimationState_ = null;

  Kanimarker.prototype.fadeInOutAnimationState_ = null;

  Kanimarker.prototype.debug_ = false;

  Kanimarker.prototype.callbacks = {};

  Kanimarker.prototype.moveDuration = 2000;

  Kanimarker.prototype.accuracyDuration = 2000;

  function Kanimarker(map) {
    this.map = map;
    this.map.on('postcompose', this.postcompose_, this);
    this.map.on('precompose', this.precompose_, this);
    this.map.on('pointerdrag', this.pointerdrag_, this);
  }

  Kanimarker.prototype.cancelAnimation = function() {
    this.moveAnimationState_ = null;
    this.directionAnimationState_ = null;
    this.accuracyAnimationState_ = null;
    return this.fadeInOutAnimationState_ = null;
  };

  Kanimarker.prototype.showDebugInfomation = function(newValue) {
    this.debug_ = newValue;
    return this.map.render();
  };

  Kanimarker.prototype.setHeadingUp = function(newValue) {
    if (this.headingUp !== newValue) {
      if (newValue === true && (this.position == null)) {
        return;
      }
      this.headingUp = newValue;
      this.cancelAnimation();
      if (this.position != null) {
        this.map.getView().setCenter(this.position.slice());
      }
      if (this.direction != null) {
        this.map.getView().setRotation(-(this.direction / 180 * Math.PI));
      }
      this.map.render();
      return this.dispatch('change:headingup', newValue);
    }
  };

  Kanimarker.prototype.setPosition = function(toPosition, accuracy, silent) {
    var fromPosition;
    if (silent == null) {
      silent = false;
    }
    if (((toPosition != null) && (this.position != null) && toPosition[0] === this.position[0] && toPosition[1] === this.position[1]) || ((toPosition == null) && (this.position == null))) {
      if (accuracy != null) {
        this.setAccuracy(accuracy, silent);
      }
      return;
    }
    if (accuracy != null) {
      this.setAccuracy(accuracy, true);
    }
    if (this.moveAnimationState_ != null) {
      fromPosition = this.moveAnimationState_.current;
    } else {
      fromPosition = this.position;
    }
    this.position = toPosition;
    if (this.headingUp && (toPosition != null)) {
      this.map.getView().setCenter(toPosition.slice());
    }
    if ((fromPosition != null) && (toPosition != null)) {
      this.moveAnimationState_ = {
        start: new Date(),
        from: fromPosition.slice(),
        current: fromPosition.slice(),
        to: toPosition.slice(),
        duration: this.moveDuration,
        animate: function(frameStateTime) {
          var time;
          time = (frameStateTime - this.start) / this.duration;
          if (time <= 1) {
            if (this.duration > 8000) {
              this.current[0] = this.from[0] + ((this.to[0] - this.from[0]) * ol.easing.linear(time));
              this.current[1] = this.from[1] + ((this.to[1] - this.from[1]) * ol.easing.linear(time));
            } else if (this.duration > 2000) {
              this.current[0] = this.from[0] + ((this.to[0] - this.from[0]) * ol.easing.inAndOut(time));
              this.current[1] = this.from[1] + ((this.to[1] - this.from[1]) * ol.easing.inAndOut(time));
            } else {
              this.current[0] = this.from[0] + ((this.to[0] - this.from[0]) * ol.easing.easeOut(time));
              this.current[1] = this.from[1] + ((this.to[1] - this.from[1]) * ol.easing.easeOut(time));
            }
            return true;
          } else {
            return false;
          }
        }
      };
    }
    if ((fromPosition == null) && (toPosition != null)) {
      this.fadeInOutAnimationState_ = {
        start: new Date(),
        from: 0,
        current: 0,
        to: 1,
        animationPosition: toPosition,
        animate: function(frameStateTime) {
          var time;
          time = (frameStateTime - this.start) / 500;
          if (time <= 1) {
            this.current = this.from + ((this.to - this.from) * (function(x) {
              return x;
            })(time));
            return true;
          } else {
            return false;
          }
        }
      };
    }
    if ((fromPosition != null) && (toPosition == null)) {
      if (this.headingUp) {
        this.setHeadingUp(false);
      }
      this.moveAnimationState_ = null;
      this.fadeInOutAnimationState_ = {
        start: new Date(),
        from: 1,
        current: 1,
        to: 0,
        animationPosition: fromPosition,
        animate: function(frameStateTime) {
          var time;
          time = (frameStateTime - this.start) / 500;
          if (time <= 1) {
            this.current = this.from + ((this.to - this.from) * (function(x) {
              return x;
            })(time));
            return true;
          } else {
            return false;
          }
        }
      };
    }
    if (!silent) {
      return this.map.render();
    }
  };

  Kanimarker.prototype.setAccuracy = function(accuracy, silent) {
    var from;
    if (silent == null) {
      silent = false;
    }
    if (this.accuracy === accuracy) {
      return;
    }
    if (this.accuracyAnimationState_ != null) {
      from = this.accuracyAnimationState_.current;
    } else {
      from = this.accuracy;
    }
    this.accuracy = accuracy;
    this.accuracyAnimationState_ = {
      start: new Date(),
      from: from,
      to: accuracy,
      current: from,
      duration: this.accuracyDuration,
      animate: function(frameStateTime) {
        var time;
        time = (frameStateTime - this.start) / this.duration;
        if (time <= 1) {
          this.current = this.from + ((this.to - this.from) * ol.easing.easeOut(time));
          return true;
        } else {
          return false;
        }
      }
    };
    if (!silent) {
      return this.map.render();
    }
  };

  Kanimarker.prototype.setDirection = function(newDirection, silent) {
    var n, virtualDirection;
    if (silent == null) {
      silent = false;
    }
    if (newDirection === void 0 || this.direction === newDirection) {
      return;
    }
    if (newDirection > this.direction) {
      n = newDirection - this.direction;
      if (n <= 180) {
        virtualDirection = this.direction + n;
      } else {
        virtualDirection = this.direction - (360 - n);
      }
    } else {
      n = this.direction - newDirection;
      if (n <= 180) {
        virtualDirection = this.direction - n;
      } else {
        virtualDirection = this.direction + (360 - n);
      }
    }
    this.directionAnimationState_ = {
      start: new Date(),
      from: this.direction,
      current: this.direction,
      to: virtualDirection,
      animate: function(frameStateTime) {
        var time;
        time = (frameStateTime - this.start) / 500;
        if (time <= 1) {
          this.current = this.from + ((this.to - this.from) * ol.easing.easeOut(time));
          return true;
        } else {
          return false;
        }
      }
    };
    this.direction = newDirection;
    if (this.headingUp) {
      this.map.getView().setRotation(-(newDirection / 180 * Math.PI));
    }
    if (!silent) {
      return this.map.render();
    }
  };

  Kanimarker.prototype.postcompose_ = function(event) {
    var accuracy, circleStyle, context, debugText, direction, frameState, iconStyle, opacity, pixel, pixelRatio, position, vectorContext;
    context = event.context;
    vectorContext = event.vectorContext;
    frameState = event.frameState;
    pixelRatio = frameState.pixelRatio;
    opacity = 1;
    position = this.position;
    accuracy = this.accuracy;
    direction = this.direction;
    if (this.moveAnimationState_ != null) {
      if (this.moveAnimationState_.animate(frameState.time)) {
        position = this.moveAnimationState_.current;
        frameState.animate = true;
      } else {
        this.moveAnimationState_ = null;
      }
    }
    if (this.fadeInOutAnimationState_ != null) {
      if (this.fadeInOutAnimationState_.animate(frameState.time)) {
        opacity = this.fadeInOutAnimationState_.current;
        position = this.fadeInOutAnimationState_.animationPosition;
        frameState.animate = true;
      } else {
        this.fadeInOutAnimationState_ = null;
      }
    }
    if (this.directionAnimationState_ != null) {
      if (this.directionAnimationState_.animate(frameState.time)) {
        direction = this.directionAnimationState_.current;
        frameState.animate = true;
      } else {
        this.directionAnimationState_ = null;
      }
    }
    if (this.accuracyAnimationState_ != null) {
      if (this.accuracyAnimationState_.animate(frameState.time)) {
        accuracy = this.accuracyAnimationState_.current;
        frameState.animate = true;
      } else {
        this.accuracyAnimationState_ = null;
      }
    }
    if (position != null) {
      circleStyle = new ol.style.Circle({
        snapToPixel: false,
        radius: (accuracy / frameState.viewState.resolution) * pixelRatio,
        fill: new ol.style.Fill({
          color: "rgba(56, 149, 255, " + (0.2 * opacity) + ")"
        }),
        stroke: new ol.style.Stroke({
          color: "rgba(56, 149, 255, " + (0.8 * opacity) + ")",
          width: 1 * pixelRatio
        })
      });
      vectorContext.setImageStyle(circleStyle);
      vectorContext.drawPointGeometry(new ol.geom.Point(position), null);
      iconStyle = new ol.style.Circle({
        radius: 8 * pixelRatio,
        snapToPixel: false,
        fill: new ol.style.Fill({
          color: "rgba(0, 160, 233, " + (1.0 * opacity) + ")"
        }),
        stroke: new ol.style.Stroke({
          color: "rgba(255, 255, 255, " + (1.0 * opacity) + ")",
          width: 3 * pixelRatio
        })
      });
      vectorContext.setImageStyle(iconStyle);
      vectorContext.drawPointGeometry(new ol.geom.Point(position), null);
      context.save();
      if (this.headingUp) {
        context.translate(context.canvas.width / 2, context.canvas.height / 2);
      } else {
        pixel = this.map.getPixelFromCoordinate(position);
        context.translate(pixel[0] * pixelRatio, pixel[1] * pixelRatio);
      }
      context.rotate((direction / 180 * Math.PI) + frameState.viewState.rotation);
      context.scale(pixelRatio, pixelRatio);
      context.beginPath();
      context.moveTo(0, -20);
      context.lineTo(-7, -12);
      context.lineTo(7, -12);
      context.closePath();
      context.fillStyle = "rgba(0, 160, 233, " + (1.0 * opacity) + ")";
      context.strokeStyle = "rgba(255, 255, 255, " + (1.0 * opacity) + ")";
      context.lineWidth = 3;
      context.fill();
      context.restore();
    }
    if (this.debug_) {
      debugText = JSON.stringify({
        '現在地': kanimarker.position,
        '方向': kanimarker.direction,
        '計測精度': kanimarker.accuracy,
        'モード': kanimarker.headingUp ? '追従モード' : 'ビューモード',
        '移動': (kanimarker.moveAnimationState_ != null) ? 'アニメーション中' : 'アニメーションなし',
        '回転': (kanimarker.directionAnimationState_ != null) ? 'アニメーション中' : 'アニメーションなし',
        '計測精度': (kanimarker.accuracyAnimationState_ != null) ? 'アニメーション中' : 'アニメーションなし',
        'フェードイン・アウト': (kanimarker.fadeInOutAnimationState_ != null) ? 'アニメーション中' : 'アニメーションなし'
      }, null, 2);
      context.save();
      context.fillStyle = "rgba(255, 255, 255, 0.6)";
      context.fillRect(0, context.canvas.height - 20, context.canvas.width, 20);
      context.font = "10px";
      context.fillStyle = "black";
      context.fillText(debugText, 10, context.canvas.height - 7);
      return context.restore();
    }
  };

  Kanimarker.prototype.precompose_ = function(event) {
    var direction, frameState, position;
    if ((this.position != null) && this.headingUp) {
      frameState = event.frameState;
      position = this.position;
      direction = this.direction;
      if (this.moveAnimationState_ != null) {
        if (this.moveAnimationState_.animate(frameState.time)) {
          position = this.moveAnimationState_.current;
        }
      }
      if (this.directionAnimationState_ != null) {
        if (this.directionAnimationState_.animate(frameState.time)) {
          direction = this.directionAnimationState_.current;
        }
      }
      frameState.viewState.center[0] = position[0];
      frameState.viewState.center[1] = position[1];
      return frameState.viewState.rotation = -(direction / 180 * Math.PI);
    }
  };

  Kanimarker.prototype.pointerdrag_ = function() {
    if (this.headingUp) {
      return this.setHeadingUp(false);
    }
  };

  Kanimarker.prototype.on = function(type, listener) {
    var base;
    (base = this.callbacks)[type] || (base[type] = []);
    this.callbacks[type].push(listener);
    return this;
  };

  Kanimarker.prototype.dispatch = function(type, data) {
    var callback, chain, i, len, results;
    chain = this.callbacks[type];
    if (chain != null) {
      results = [];
      for (i = 0, len = chain.length; i < len; i++) {
        callback = chain[i];
        results.push(callback(data));
      }
      return results;
    }
  };

  return Kanimarker;

})();

//# sourceMappingURL=kanimarker.js.map

// Generated by CoffeeScript 1.9.3
var Kanilayer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Kanilayer = (function(superClass) {
  extend(Kanilayer, superClass);

  Kanilayer.prototype.floorId = false;

  Kanilayer.prototype.tileA = null;

  Kanilayer.prototype.tileB = null;

  Kanilayer.prototype.vector = null;

  Kanilayer.prototype.debug_ = false;

  Kanilayer.prototype.fadeAnimation = null;

  Kanilayer.prototype.targetShelf = null;

  Kanilayer.prototype.setTargetShelf = function(id) {
    this.targetShelf = id;
    return this.vector.changed();
  };

  Kanilayer.prototype.getHaikaTileSource_ = function(id) {
    var xid;
    xid = ("0000000000" + parseInt(id)).slice(-10);
    return new ol.source.XYZ({
      url: "https://tiles.haika.io/" + xid + "/{z}/{x}/{y}.png",
      maxZoom: 24
    });
  };

  Kanilayer.prototype.getHaikaVectorSource_ = function(id) {
    return new ol.source.Vector({
      url: "https://app.haika.io/api/facility/2/" + id + ".geojson",
      format: new ol.format.GeoJSON()
    });
  };

  function Kanilayer(options) {
    var merge, options_, styleFunction;
    options_ = {
      minResolution: 0.0001,
      maxResolution: 100,
      kFloor: null
    };
    merge = function(obj1, obj2) {
      var attr, results;
      if (!obj2) {
        obj2 = {};
      }
      results = [];
      for (attr in obj2) {
        if (obj2.hasOwnProperty(attr)) {
          results.push(obj1[attr] = obj2[attr]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    merge(options_, options);
    this.tileA = new ol.layer.Tile({
      source: null,
      opacity: 1,
      preload: 3
    });
    this.tileB = new ol.layer.Tile({
      source: null,
      opacity: 0,
      visible: false,
      preload: 3
    });
    styleFunction = (function(_this) {
      return function(feature, resolution) {
        var ref, styleOptions, text;
        if (resolution < 1.0) {
          switch (feature.get('type')) {
            case 'shelf':
              if (resolution < 0.28) {
                text = (ref = feature.get('label')) != null ? ref : '';
              } else {
                text = '';
              }
              if (parseInt(_this.targetShelf) === parseInt(feature.get('id'))) {
                styleOptions = {
                  stroke: new ol.style.Stroke({
                    color: '#9E7E49',
                    width: 2
                  }),
                  fill: new ol.style.Fill({
                    color: '#FFBE4D'
                  }),
                  text: new ol.style.Text({
                    textAlign: 'center',
                    textBaseline: 'hanging',
                    font: 'Arial bold',
                    text: "（目的地）",
                    fill: new ol.style.Fill({
                      color: '#D95C02'
                    }),
                    stroke: new ol.style.Stroke({
                      color: [255, 255, 255, 1],
                      width: 3
                    }),
                    scale: 2,
                    offsetX: 0,
                    offsetY: 0,
                    rotation: 0
                  }),
                  zIndex: 9999
                };
              } else {
                styleOptions = {
                  text: new ol.style.Text({
                    textAlign: 'center',
                    textBaseline: 'hanging',
                    font: 'Arial',
                    text: text,
                    fill: new ol.style.Fill({
                      color: [0, 0, 0, 1]
                    }),
                    stroke: new ol.style.Stroke({
                      color: [255, 255, 255, 1],
                      width: 1.5
                    }),
                    scale: 1.5,
                    offsetX: 0,
                    offsetY: 0,
                    rotation: 0
                  })
                };
              }
              break;
            case 'beacon':
              if (_this.debug_ === true) {
                styleOptions = {
                  image: new ol.style.Circle({
                    radius: 5,
                    fill: null,
                    stroke: new ol.style.Stroke({
                      color: '#000000'
                    })
                  }),
                  text: new ol.style.Text({
                    textAlign: 'left',
                    textBaseline: 'middle',
                    font: 'Arial 12px',
                    text: feature.get('minor') + ' (' + feature.get('lane') + ')',
                    fill: new ol.style.Fill({
                      color: [0, 0, 0, 1]
                    }),
                    stroke: new ol.style.Stroke({
                      color: [255, 255, 255, 1],
                      width: 1.5
                    }),
                    scale: 1,
                    offsetX: 8,
                    offsetY: 0,
                    rotation: 0
                  })
                };
              } else {
                styleOptions = {};
              }
              break;
            default:
              styleOptions = {};
          }
          return [new ol.style.Style(styleOptions)];
        } else {
          return [new ol.style.Style()];
        }
      };
    })(this);
    this.vector = new ol.layer.Vector({
      source: null,
      style: styleFunction,
      opacity: 1
    });
    options_.layers = [this.tileB, this.tileA, this.vector];
    Kanilayer.__super__.constructor.call(this, options_);
    this.tileA.on('postcompose', this.postcompose_, this);
    this.tileA.on('precompose', this.precompose_, this);
    if (options_.kFloor != null) {
      this.setFloorId(options_.kFloor, false);
    }
  }

  Kanilayer.prototype.setFloorId = function(newId, animation) {
    var newSource;
    if (animation == null) {
      animation = true;
    }
    if (this.floorId !== newId) {
      this.floorId = newId;
      if (animation) {
        this.tileB.setSource(this.tileA.getSource());
        this.tileB.setOpacity(1);
        this.tileB.setVisible(true);
        this.tileA.setOpacity(0);
        this.vector.setOpacity(0);
      } else {
        this.tileA.setOpacity(1);
        this.tileB.setVisible(false);
        this.tileB.setSource(null);
        this.vector.setOpacity(1);
      }
      if (newId != null) {
        newSource = this.getHaikaTileSource_(newId);
        this.tileA.setSource(newSource);
        this.vector.setSource(this.getHaikaVectorSource_(newId));
      } else {
        newSource = this.getHaikaTileSource_(0);
        this.tileA.setSource(newSource);
        this.vector.setSource(null);
      }
      if (animation) {
        this.fadeAnimation = {
          start: new Date(),
          phase: 0,
          tilesStarted: 0,
          tilesLoaded: 0
        };
        if (newId == null) {
          this.fadeAnimation.phase = 2;
        } else {
          newSource.on('tileloadstart', (function(_this) {
            return function() {
              if (_this.fadeAnimation != null) {
                return _this.fadeAnimation.tilesStarted++;
              }
            };
          })(this));
          newSource.on('tileloadend', (function(_this) {
            return function() {
              if (_this.fadeAnimation != null) {
                return _this.fadeAnimation.tilesLoaded++;
              }
            };
          })(this));
          newSource.on('tileloaderror', (function(_this) {
            return function() {
              if (_this.fadeAnimation != null) {
                return _this.fadeAnimation.tilesLoaded++;
              }
            };
          })(this));
        }
      }
      return this.changed();
    }
  };

  Kanilayer.prototype.showDebugInfomation = function(newValue) {
    this.debug_ = newValue;
    return this.changed();
  };

  Kanilayer.prototype.precompose_ = function(event) {
    var frameState, time;
    frameState = event.frameState;
    if (this.fadeAnimation != null) {
      frameState.animate = true;
      if (this.fadeAnimation.phase === 0) {
        if (frameState.time - this.fadeAnimation.start > 2000) {
          this.fadeAnimation.phase = 1;
          return this.fadeAnimation.start = new Date();
        } else if (this.fadeAnimation.tilesStarted > 0 && this.fadeAnimation.tilesLoaded > 0) {
          this.fadeAnimation.phase = 1;
          if (frameState.time - this.fadeAnimation.start > 50) {
            return this.fadeAnimation.start = new Date();
          }
        }
      } else if (this.fadeAnimation.phase === 1) {
        time = (frameState.time - this.fadeAnimation.start) / 200;
        if (time <= 1) {
          return this.tileA.setOpacity(time);
        } else {
          this.tileA.setOpacity(1);
          this.fadeAnimation.phase = 2;
          return this.fadeAnimation.start = new Date();
        }
      } else if (this.fadeAnimation.phase === 2) {
        time = (frameState.time - this.fadeAnimation.start) / 150;
        if (time <= 1) {
          this.tileB.setOpacity(1 - time);
          return this.vector.setOpacity(time);
        } else {
          this.vector.setOpacity(1);
          this.tileB.setVisible(false);
          this.tileB.setSource(null);
          return this.fadeAnimation = null;
        }
      }
    }
  };

  Kanilayer.prototype.postcompose_ = function(event) {
    var context, debugText;
    if (this.debug_) {
      context = event.context;
      debugText = "[Kanilayer]";
      if (this.fadeAnimation) {
        debugText += ' アニメーション中 フェーズ:';
        debugText += this.fadeAnimation.phase;
      }
      context.save();
      context.fillStyle = "rgba(255, 255, 255, 0.6)";
      context.fillRect(0, context.canvas.height - 20, context.canvas.width, 20);
      context.font = "10px";
      context.fillStyle = "black";
      context.fillText(debugText, 10, context.canvas.height - 7);
      return context.restore();
    }
  };

  return Kanilayer;

})(ol.layer.Group);

//# sourceMappingURL=kanilayer.js.map

var Buffer, _validate;

_validate = function(beacons) {
  var b, i, len;
  for (i = 0, len = beacons.length; i < len; i++) {
    b = beacons[i];
    if ((b.major == null) || (b.minor == null) || (b.uuid == null) || (b.rssi == null)) {
      return false;
    }
    if ((typeof b.major !== 'number') || (typeof b.minor !== 'number') || (typeof b.rssi !== 'number') || (typeof b.uuid !== 'string')) {
      return false;
    }
  }
  return true;
};

Buffer = (function() {
  function Buffer(length, verify) {
    this.length = length;
    this.verify = verify != null ? verify : true;
    this.buffer = [];
  }

  Buffer.prototype.push = function(beacons) {
    if (this.verify && !_validate(beacons)) {
      throw new Error('Invalid Beacons.');
    }
    if (this.buffer.length >= this.length) {
      this.buffer.shift();
    }
    return this.buffer.push(beacons);
  };

  Buffer.prototype.last = function(size) {
    if (size > 0) {
      return this.buffer.slice(-1 * size);
    }
    return [];
  };

  Buffer.prototype.clear = function() {
    this.buffer.length = 0;
  };

  Buffer.prototype.size = function() {
    return this.buffer.length;
  };

  return Buffer;

})();

if (typeof exports !== 'undefined') {
  module.exports = Buffer;
} else {
  this.BeaconsBuffer = Buffer;
}

var Kanikama,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Kanikama = (function() {
  Kanikama.prototype.geojsons = {};

  Kanikama.prototype.facility = null;

  Kanikama.prototype.floor = null;

  Kanikama.prototype.positionLatLng = null;

  Kanikama.prototype.positionAccuracy = null;

  Kanikama.prototype.compass = null;

  Kanikama.prototype.pastFacilityid = null;

  Kanikama.prototype.lastFloor = null;

  Kanikama.prototype.waitElapsed = 0;

  Kanikama.prototype.lastFloorCall = 0;

  Kanikama.prototype.table = null;

  Kanikama.prototype.notifiedFloorId = null;

  function Kanikama() {
    this.addGeoJSON = bind(this.addGeoJSON, this);
    this.buffer = new BeaconsBuffer(10);
  }

  Kanikama.prototype.pushBeacons = function(beacons) {
    var ref;
    ref = [null, null, null, null], this.facility = ref[0], this.floor = ref[1], this.position = ref[2], this.target = ref[3];
    this.buffer.push(beacons);
    this.facilityDetector();
    if (this.facility != null) {
      this.floorDetector();
    }
    if (this.floor != null) {
      switch (this.floor.id) {
        case '7':
          this.sabaePositionDetectorV2();
          break;
        case '8':
          this.sabaePositionDetector2F();
          break;
        default:
          console.log('floor.id not found');
      }
    }
  };

  Kanikama.prototype.pushCompass = function(compass) {
    this.compass = compass;
  };

  Kanikama.prototype.clear = function() {};

  Kanikama.prototype.beaconToClassify = function(b) {
    var c, i, len, ref;
    if (this.table === null) {
      return null;
    }
    ref = this.table;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      if ((c.uuid !== null) && (c.uuid.toLowerCase() !== b.uuid.toLowerCase())) {
        continue;
      }
      if ((c.major !== null) && (c.major !== b.major)) {
        continue;
      }
      if ((c.minor !== null) && (c.minor instanceof Array) && (c.minor.indexOf(b.minor) === -1)) {
        continue;
      }
      if ((c.minor !== null) && (typeof c.minor === 'number') && (c.minor !== b.minor)) {
        continue;
      }
      if ((b.lane != null) && (c.lane !== b.lane)) {
        continue;
      }
      return c;
    }
    return null;
  };

  Kanikama.prototype.addGeoJSON = function(geojson) {
    var _b, _c, b, c, facility, feature, floor, i, j, k, l, len, len1, len2, len3, len4, m, ref, ref1, ref2, ref3, ref4, ref5, ref6, tmp;
    ref = geojson.properties, facility = ref.facility, floor = ref.floor;
    if (this.table === null) {
      this.table = [];
    }
    if (this.table.filter(function(c) {
      return (c.facility.id === facility.id) && (c.floor.id === floor.id);
    }).length !== 0) {
      return;
    }
    ref1 = geojson.features;
    for (i = 0, len = ref1.length; i < len; i++) {
      feature = ref1[i];
      b = feature.properties;
      if (b.type !== 'beacon') {
        continue;
      }
      if (typeof b.uuid === 'undefined') {
        continue;
      }
      if (typeof b.major === 'undefined') {
        continue;
      }
      if (typeof b.minor === 'undefined') {
        continue;
      }
      c = this.beaconToClassify(b);
      if (c !== null) {
        if (typeof c.minor === 'number') {
          ref2 = [c.minor, []], tmp = ref2[0], c.minor = ref2[1];
          c.minor.push(tmp);
        }
        c.minor.push(b.minor);
      } else {
        this.table.push({
          facility: facility,
          floor: floor,
          lane: b.lane,
          uuid: b.uuid,
          major: b.major,
          minor: b.minor
        });
      }
    }
    ref3 = [floor, facility];
    for (j = 0, len1 = ref3.length; j < len1; j++) {
      b = ref3[j];
      if (typeof b.uuid === 'undefined') {
        continue;
      }
      if (typeof b.major === 'undefined') {
        continue;
      }
      if (typeof b.minor === 'undefined') {
        continue;
      }
      if (this.beaconToClassify(b) !== null) {
        continue;
      }
      this.table.push({
        facility: facility,
        floor: floor,
        lane: b.lane,
        uuid: b.uuid,
        major: b.major,
        minor: b.minor
      });
    }
    ref4 = [floor, facility];
    for (k = 0, len2 = ref4.length; k < len2; k++) {
      b = ref4[k];
      if (typeof b.uuid === 'undefined') {
        continue;
      }
      if (typeof b.major === 'undefined') {
        continue;
      }
      ref5 = geojson.features;
      for (l = 0, len3 = ref5.length; l < len3; l++) {
        feature = ref5[l];
        _b = feature.properties;
        if (_b.type !== 'beacon') {
          continue;
        }
        if (typeof _b.uuid !== 'undefined') {
          continue;
        }
        if (typeof _b.major !== 'undefined') {
          continue;
        }
        if (typeof _b.minor === 'undefined') {
          continue;
        }
        c = null;
        ref6 = this.table;
        for (m = 0, len4 = ref6.length; m < len4; m++) {
          _c = ref6[m];
          if ((_c.uuid !== null) && (_c.uuid.toLowerCase() !== b.uuid.toLowerCase())) {
            continue;
          }
          if ((_c.major !== null) && (_c.major !== b.major)) {
            continue;
          }
          if ((_b.lane != null) && (_c.lane !== _b.lane)) {
            continue;
          }
          if (_c.floor.id !== floor.id) {
            continue;
          }
          c = _c;
        }
        if (c !== null) {
          if (typeof c.minor === 'number') {
            c.minor = [c.minor];
          }
          c.minor.push(_b.minor);
        } else {
          this.table.push({
            facility: facility,
            floor: floor,
            lane: _b.lane,
            uuid: b.uuid,
            major: b.major,
            minor: _b.minor
          });
        }
      }
    }
    if (this.geojsons == null) {
      this.geojsons = {};
    }
    if (this.geojsons[facility.id] == null) {
      this.geojsons[facility.id] = {};
    }
    this.geojsons[facility.id][floor.id] = geojson;
  };

  Kanikama.prototype.addMultipleGeoJSON = function(geojsons) {
    var geojson, i, len;
    for (i = 0, len = geojsons.length; i < len; i++) {
      geojson = geojsons[i];
      this.addGeoJSON(geojson);
    }
  };

  Kanikama.prototype.facilityDetector = function() {
    var accuracies, b, beacons, c, comparator, facilities, facility, i, id, j, len, len1, ref, windowSize;
    windowSize = 3;
    facilities = {};
    ref = this.buffer.last(windowSize);
    for (i = 0, len = ref.length; i < len; i++) {
      beacons = ref[i];
      for (j = 0, len1 = beacons.length; j < len1; j++) {
        b = beacons[j];
        c = this.beaconToClassify(b);
        if (c === null) {
          continue;
        }
        if (facilities[c.facility.id] == null) {
          facilities[c.facility.id] = [];
        }
        facilities[c.facility.id].push(b);
      }
    }
    accuracies = [];
    if (Object.keys(facilities).length > 0) {
      for (id in facilities) {
        beacons = facilities[id];
        beacons.sort(function(a, b) {
          return b.rssi - a.rssi;
        });
        accuracies.push({
          id: id,
          accuracy: this.rssiToAccuracy(beacons[0].rssi)
        });
      }
    }
    comparator = (function(_this) {
      return function(f0, f1) {
        if (f0.id === _this.pastFacilityid) {
          return -1;
        }
        if (f1.id === _this.pastFacilityid) {
          return 1;
        } else {
          return f1.accuracy - f0.accuracy;
        }
      };
    })(this);
    facility = accuracies.sort(comparator)[0];
    if (facility != null) {
      if (facility.accuracy > 1.0) {
        facility.accuracy = 1.0;
      }
      this.pastFacilityid = facility.id;
    }
    if ((facility == null) && (this.pastFacilityid != null)) {
      facility = {
        id: this.pastFacilityid,
        accuracy: 0.0
      };
    }
    if (facility != null) {
      facilities = this.table.filter(function(f) {
        return f.facility.id === facility.id;
      });
      this.facility = facilities[0].facility;
    }
    return true;
  };

  Kanikama.prototype.floorDetector = function() {
    var _beacons, _tmp, averages, b, beacons, changeFloor, effectiveRange, f, features, floorBeacons, geojson, i, id, j, lat, len, len1, lng, minors, near, nearFeatures, nears, newFloor, now, ref, ref1, ref2, sum, waitThreshold, windowSize;
    windowSize = 1;
    waitThreshold = 5000;
    effectiveRange = 3;
    changeFloor = false;
    beacons = [];
    ref = this.buffer.last(windowSize);
    for (i = 0, len = ref.length; i < len; i++) {
      _beacons = ref[i];
      _tmp = _beacons.filter((function(_this) {
        return function(b) {
          var c;
          c = _this.beaconToClassify(b);
          return (c !== null) && (c.facility.id === _this.facility.id);
        };
      })(this));
      beacons = beacons.concat(_tmp);
    }
    beacons = beacons.filter(function(b) {
      return b.rssi !== 0;
    });
    averages = [];
    ref1 = this.geojsons[this.facility.id];
    for (id in ref1) {
      geojson = ref1[id];
      floorBeacons = beacons.filter((function(_this) {
        return function(b) {
          var c;
          c = _this.beaconToClassify(b);
          return (c !== null) && ((String(c.facility.id) === String(_this.facility.id)) && (String(c.floor.id) === String(id)));
        };
      })(this));
      if (floorBeacons.length === 0) {
        continue;
      }
      floorBeacons.sort(function(a, b) {
        return b.rssi - a.rssi;
      });
      features = geojson.features.filter(function(feature) {
        return feature.properties.minor === floorBeacons[0].minor;
      });
      if (features.length === 0) {
        continue;
      }
      ref2 = features[0].geometry.coordinates, lat = ref2[0], lng = ref2[1];
      near = {
        latitude: lat,
        longitude: lng
      };
      nearFeatures = geojson.features.filter(function(feature) {
        var ref3;
        if (feature.properties.type !== 'beacon') {
          return false;
        }
        ref3 = feature.geometry.coordinates, lat = ref3[0], lng = ref3[1];
        return geolib.getDistance(near, {
          latitude: lat,
          longitude: lng
        }) <= effectiveRange;
      });
      minors = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = nearFeatures.length; j < len1; j++) {
          f = nearFeatures[j];
          results.push(f.properties.minor);
        }
        return results;
      })();
      nears = beacons.filter(function(arg) {
        var minor;
        minor = arg.minor;
        return minors.indexOf(minor) !== -1;
      });
      sum = 0;
      for (j = 0, len1 = nears.length; j < len1; j++) {
        b = nears[j];
        sum += b.rssi;
      }
      averages.push({
        id: id,
        average: sum / nears.length
      });
    }
    id = null;
    if (averages.length > 0) {
      id = averages.sort(function(a, b) {
        return b.average - a.average;
      })[0].id;
    }
    newFloor = this.lastFloor;
    if ((this.lastFloor != null) && (id === this.lastFloor)) {
      this.waitElapsed = 0;
    } else {
      now = new Date();
      this.waitElapsed += now - this.lastFloorCall;
      if ((this.lastFloor === null) || (this.waitElapsed > waitThreshold)) {
        newFloor = id;
        console.log('floor changed' + this.waitElapsed + ' ' + this.lastFloor + '-->' + newFloor + ' ' + JSON.stringify(averages));
        this.waitElapsed = 0;
        changeFloor = true;
      }
      this.lastFloorCall = now;
    }
    this.lastFloor = newFloor;
    if (newFloor !== null) {
      this.floor = this.table.filter((function(_this) {
        return function(f) {
          return (f.facility.id === _this.facility.id) && (f.floor.id === newFloor);
        };
      })(this))[0].floor;
    } else {
      this.floor = null;
    }
    if (changeFloor && this.floor !== null && this.notifiedFloorId !== this.floor.id) {
      this.notifiedFloorId = this.floor.id;
      this.onChangeFloor();
    }
    return true;
  };

  Kanikama.prototype.sabaePositionDetector = function() {
    var POINT_2_LATLNG, WINDOW_SIZE, accuracy, algorithm, d, nearest1, nearest2, nearest2_v21, nearestD, p, ref, ref1, ref2, ref3, ref4, ref5, ret, text;
    WINDOW_SIZE = 1;
    POINT_2_LATLNG = [
      {
        "lane": "A",
        "latlng": [136.1863696569712, 35.96191126156543],
        "point": 0
      }, {
        "lane": "A",
        "latlng": [136.18639230648637, 35.961905875380126],
        "point": 1
      }, {
        "lane": "A",
        "latlng": [136.18641398322058, 35.96190510933523],
        "point": 2
      }, {
        "lane": "A",
        "latlng": [136.18643599258996, 35.96190433153515],
        "point": 3
      }, {
        "lane": "A",
        "latlng": [136.18645773928517, 35.9619038327686],
        "point": 4
      }, {
        "lane": "A",
        "latlng": [136.18647856748686, 35.96190278200115],
        "point": 5
      }, {
        "lane": "A",
        "latlng": [136.18650040327566, 35.961901875459894],
        "point": 6
      }, {
        "lane": "A",
        "latlng": [136.1865213689799, 35.961901314376206],
        "point": 7
      }, {
        "lane": "A",
        "latlng": [136.18654250584308, 35.96190083716078],
        "point": 8
      }, {
        "lane": "A",
        "latlng": [136.18656499963947, 35.961899772490426],
        "point": 9
      }, {
        "lane": "A",
        "latlng": [136.18658784059397, 35.96189896530245],
        "point": 10
      }, {
        "lane": "A",
        "latlng": [136.18661084786532, 35.96189815223689],
        "point": 11
      }, {
        "lane": "A",
        "latlng": [136.18663180388558, 35.96189741166151],
        "point": 12
      }, {
        "lane": "A",
        "latlng": [136.18665458939978, 35.96189660643273],
        "point": 13
      }, {
        "lane": "A",
        "latlng": [136.18667804018332, 35.96189577769361],
        "point": 14
      }, {
        "lane": "A",
        "latlng": [136.1867014335756, 35.961896974113614],
        "point": 15
      }, {
        "lane": "B",
        "latlng": [136.1863645958551, 35.96181743228368],
        "point": 0
      }, {
        "lane": "B",
        "latlng": [136.18638732106814, 35.96181653926824],
        "point": 1
      }, {
        "lane": "B",
        "latlng": [136.18641004628117, 35.9618156462528],
        "point": 2
      }, {
        "lane": "B",
        "latlng": [136.18643200502703, 35.96181496015777],
        "point": 3
      }, {
        "lane": "B",
        "latlng": [136.18645278986847, 35.96181413571413],
        "point": 4
      }, {
        "lane": "B",
        "latlng": [136.1864736807471, 35.961813217606256],
        "point": 5
      }, {
        "lane": "B",
        "latlng": [136.18649558647337, 35.96181257834334],
        "point": 6
      }, {
        "lane": "B",
        "latlng": [136.18651775487186, 35.961811660046926],
        "point": 7
      }, {
        "lane": "B",
        "latlng": [136.18653859515052, 35.961810833644094],
        "point": 8
      }, {
        "lane": "B",
        "latlng": [136.18655994164337, 35.96181012422727],
        "point": 9
      }, {
        "lane": "B",
        "latlng": [136.18658300674903, 35.96180935407544],
        "point": 10
      }, {
        "lane": "B",
        "latlng": [136.18660594887302, 35.96180836347738],
        "point": 11
      }, {
        "lane": "B",
        "latlng": [136.18662703027113, 35.96180788822115],
        "point": 12
      }, {
        "lane": "B",
        "latlng": [136.18664930228374, 35.96180683138758],
        "point": 13
      }, {
        "lane": "B",
        "latlng": [136.1866731362736, 35.961805899188256],
        "point": 14
      }, {
        "lane": "B",
        "latlng": [136.18669697026348, 35.961804966988936],
        "point": 15
      }, {
        "lane": "C",
        "latlng": [136.18682401061682, 35.96193899448264],
        "point": 0
      }, {
        "lane": "C",
        "latlng": [136.18682305444435, 35.96192126967809],
        "point": 1
      }, {
        "lane": "C",
        "latlng": [136.18682209827188, 35.96190354487355],
        "point": 2
      }, {
        "lane": "C",
        "latlng": [136.18682121956186, 35.96188725600254],
        "point": 3
      }, {
        "lane": "C",
        "latlng": [136.18682034085185, 35.96187096713153],
        "point": 4
      }, {
        "lane": "D",
        "latlng": [136.18627489493238, 35.96194931833726],
        "point": 0
      }, {
        "lane": "D",
        "latlng": [136.18627392194043, 35.96193127942226],
        "point": 1
      }, {
        "lane": "D",
        "latlng": [136.18627294894847, 35.96191324050726],
        "point": 2
      }, {
        "lane": "D",
        "latlng": [136.1862719807977, 35.96189529133811],
        "point": 3
      }, {
        "lane": "D",
        "latlng": [136.18627098118253, 35.96187675882095],
        "point": 4
      }, {
        "lane": "D",
        "latlng": [136.18626991863806, 35.96185705960781],
        "point": 5
      }, {
        "lane": "D",
        "latlng": [136.18627059384187, 35.961836624606605],
        "point": 6
      }, {
        "lane": "main",
        "latlng": [136.18630578213975, 35.96186289564538],
        "point": 0
      }, {
        "lane": "main",
        "latlng": [136.1863093982123, 35.96192993579218],
        "point": 1
      }, {
        "lane": "main",
        "latlng": [136.18624939353526, 35.961974946694816],
        "point": 2
      }, {
        "lane": "main",
        "latlng": [136.1865991356181, 35.96199405792012],
        "point": 3
      }, {
        "lane": "main",
        "latlng": [136.18667132039457, 35.96206775650696],
        "point": 4
      }, {
        "lane": "main",
        "latlng": [136.186868095626, 35.961953082088385],
        "point": 5
      }, {
        "lane": "main",
        "latlng": [136.1868959775686, 35.961924222503306],
        "point": 6
      }, {
        "lane": "main",
        "latlng": [136.18645326254045, 35.96199795415883],
        "point": 7
      }, {
        "lane": "circle",
        "latlng": [136.18688711744204, 35.96182176055322],
        "point": 0
      }, {
        "lane": "circle",
        "latlng": [136.18690607068305, 35.96180139894392],
        "point": 1
      }, {
        "lane": "circle",
        "latlng": [136.18692502392406, 35.96178103733462],
        "point": 2
      }, {
        "lane": "circle",
        "latlng": [136.18693411312233, 35.96175801209845],
        "point": 3
      }, {
        "lane": "circle",
        "latlng": [136.18693403260326, 35.96173283820016],
        "point": 4
      }, {
        "lane": "circle",
        "latlng": [136.1869257398401, 35.96170781964384],
        "point": 5
      }, {
        "lane": "circle",
        "latlng": [136.186907531943, 35.96168845658414],
        "point": 6
      }, {
        "lane": "circle",
        "latlng": [136.1868815979032, 35.96167620025106],
        "point": 7
      }, {
        "lane": "circle",
        "latlng": [136.18685298727485, 35.961669928067366],
        "point": 8
      }, {
        "lane": "circle",
        "latlng": [136.18682419286148, 35.96167157506923],
        "point": 9
      }, {
        "lane": "circle",
        "latlng": [136.1867980468882, 35.96168113108361],
        "point": 10
      }, {
        "lane": "circle",
        "latlng": [136.18677661682983, 35.961695735621504],
        "point": 11
      }, {
        "lane": "circle",
        "latlng": [136.18676168883835, 35.96171555035333],
        "point": 12
      }, {
        "lane": "circle",
        "latlng": [136.18675283853224, 35.9617399158996],
        "point": 13
      }, {
        "lane": "circle",
        "latlng": [136.18674398822614, 35.961764281445866],
        "point": 14
      }
    ];
    nearest1 = function(beacons, filter_near) {
      var e, error, map;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = {
        "131": ["B", 0],
        "1": ["B", 1],
        "2": ["B", 2],
        "3": ["B", 3],
        "4": ["B", 4],
        "5": ["B", 5],
        "6": ["B", 6],
        "7": ["B", 7],
        "8": ["B", 8],
        "9": ["B", 9],
        "10": ["B", 10],
        "11": ["B", 11],
        "12": ["B", 12],
        "13": ["B", 13],
        "14": ["B", 14],
        "15": ["B", 15],
        "16": ["B", 0],
        "17": ["B", 1],
        "18": ["B", 2],
        "19": ["B", 3],
        "20": ["B", 4],
        "21": ["B", 5],
        "22": ["B", 6],
        "23": ["B", 7],
        "24": ["B", 8],
        "25": ["B", 9],
        "26": ["B", 10],
        "27": ["B", 11],
        "28": ["B", 12],
        "29": ["B", 13],
        "30": ["B", 14],
        "132": ["B", 15],
        "133": ["A", 0],
        "101": ["A", 1],
        "102": ["A", 2],
        "103": ["A", 3],
        "104": ["A", 4],
        "105": ["A", 5],
        "106": ["A", 6],
        "107": ["A", 7],
        "108": ["A", 8],
        "109": ["A", 9],
        "110": ["A", 10],
        "111": ["A", 11],
        "112": ["A", 12],
        "113": ["A", 13],
        "114": ["A", 14],
        "115": ["A", 15],
        "116": ["A", 0],
        "117": ["A", 1],
        "118": ["A", 2],
        "119": ["A", 3],
        "120": ["A", 4],
        "121": ["A", 5],
        "122": ["A", 6],
        "123": ["A", 7],
        "124": ["A", 8],
        "125": ["A", 9],
        "126": ["A", 10],
        "127": ["A", 11],
        "128": ["A", 12],
        "129": ["A", 13],
        "130": ["A", 14],
        "134": ["A", 15],
        "48": ["main", 6],
        "33": ["main", 2],
        "32": ["main", 1],
        "31": ["main", 0],
        "42": ["main", 4],
        "41": ["main", 3],
        "63": ["main", 7],
        "47": ["main", 5]
      };
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      try {
        if (filter_near > 0 && beacons.length > 1 && beacons[0].rssi - beacons[1].rssi <= filter_near) {
          return null;
        }
        return map[beacons[0].minor];
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearestD = function(beacons, heading, filter_near) {
      var _heading, _map, e, error, heading_offset, map, offsets, wide;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = {
        "39": [["D", 5], ["D", 6]],
        "38": [["D", 4], ["D", 5]],
        "37": [["D", 3], ["D", 4]],
        "36": [["D", 2], ["D", 3]],
        "35": [["D", 1], ["D", 2]],
        "34": [["D", 0], ["D", 1]],
        "40": [["D", 6], ["D", 7]],
        "46": [["C", 3], ["C", 4]],
        "43": [["C", 0], ["C", 1]],
        "44": [["C", 1], ["C", 2]],
        "45": [["C", 2], ["C", 3]]
      };
      offsets = {
        'D': 90,
        'C': 90
      };
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      try {
        if (filter_near > 0 && beacons.length > 1 && beacons[0]['rssi'] - beacons[1]['rssi'] < filter_near) {
          return null;
        }
        _map = map[beacons[0].minor];
        heading_offset = offsets[_map[0][0]];
        wide = 90;
        _heading = heading + heading_offset;
        if (_heading < 0) {
          _heading = 360 - _heading;
        }
        if (_heading >= 360) {
          _heading = _heading - 360;
        }
        console.log(heading);
        if ((90 - wide / 2 < _heading && _heading < 90 + wide / 2)) {
          return _map[1];
        }
        if ((270 - wide / 2 < _heading && _heading < 270 + wide / 2)) {
          return _map[0];
        }
        return null;
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearest2 = function(beacons, filter_near) {
      var _map, a, b, beacon_a, beacon_b, candidate, e, error, i, len, map, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = [[[133, 116], ["A", 0]], [[101, 117], ["A", 1]], [[102, 118], ["A", 2]], [[103, 119], ["A", 3]], [[104, 120], ["A", 4]], [[105, 121], ["A", 5]], [[106, 122], ["A", 6]], [[107, 123], ["A", 7]], [[108, 124], ["A", 8]], [[109, 125], ["A", 9]], [[110, 126], ["A", 10]], [[111, 127], ["A", 11]], [[112, 128], ["A", 12]], [[113, 129], ["A", 13]], [[114, 130], ["A", 14]], [[115, 134], ["A", 15]], [[131, 16], ["B", 0]], [[1, 17], ["B", 1]], [[2, 18], ["B", 2]], [[3, 19], ["B", 3]], [[4, 20], ["B", 4]], [[5, 21], ["B", 5]], [[6, 22], ["B", 6]], [[7, 23], ["B", 7]], [[8, 24], ["B", 8]], [[9, 25], ["B", 9]], [[10, 26], ["B", 10]], [[11, 27], ["B", 11]], [[12, 28], ["B", 12]], [[13, 29], ["B", 13]], [[14, 30], ["B", 14]], [[15, 132], ["B", 15]], [[34, 35], ["D", 1]], [[35, 36], ["D", 2]], [[36, 37], ["D", 3]], [[37, 38], ["D", 4]], [[38, 39], ["D", 5]], [[39, 40], ["D", 6]], [[43, 44], ["C", 1]], [[44, 45], ["C", 2]], [[45, 46], ["C", 3]], [[49, 50], ["circle", 1]], [[50, 51], ["circle", 2]], [[51, 52], ["circle", 3]], [[52, 53], ["circle", 4]], [[53, 54], ["circle", 5]], [[54, 55], ["circle", 6]], [[55, 56], ["circle", 7]], [[56, 57], ["circle", 8]], [[57, 58], ["circle", 9]], [[58, 59], ["circle", 10]], [[59, 60], ["circle", 11]], [[60, 61], ["circle", 12]], [[61, 62], ["circle", 13]]];
      candidate = [];
      for (i = 0, len = map.length; i < len; i++) {
        _map = map[i];
        ref = _map[0], a = ref[0], b = ref[1];
        beacon_a = beacons.filter(function(_item) {
          return _item.rssi !== 0 && _item.minor === a;
        });
        beacon_b = beacons.filter(function(_item) {
          return _item.rssi !== 0 && _item.minor === b;
        });
        if (beacon_a.length > 0 && beacon_b.length > 0) {
          candidate.push({
            rssi: (beacon_a[0].rssi + beacon_b[0].rssi) / 2,
            point: _map[1]
          });
        }
      }
      candidate.sort(function(x, y) {
        return y.rssi - x.rssi;
      });
      try {
        if (filter_near > 0 && candidate.length > 1 && candidate[0].rssi - candidate[1].rssi <= filter_near) {
          return null;
        }
        return candidate[0].point;
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearest2_v21 = function(beacons, filter_near, check_nearest) {
      var _map, a, b, beacon_a, beacon_b, candidate, i, len, map, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      if (check_nearest == null) {
        check_nearest = true;
      }
      map = [[[133, 116], ["A", 0]], [[101, 117], ["A", 1]], [[102, 118], ["A", 2]], [[103, 119], ["A", 3]], [[104, 120], ["A", 4]], [[105, 121], ["A", 5]], [[106, 122], ["A", 6]], [[107, 123], ["A", 7]], [[108, 124], ["A", 8]], [[109, 125], ["A", 9]], [[110, 126], ["A", 10]], [[111, 127], ["A", 11]], [[112, 128], ["A", 12]], [[113, 129], ["A", 13]], [[114, 130], ["A", 14]], [[115, 134], ["A", 15]], [[131, 16], ["B", 0]], [[1, 17], ["B", 1]], [[2, 18], ["B", 2]], [[3, 19], ["B", 3]], [[4, 20], ["B", 4]], [[5, 21], ["B", 5]], [[6, 22], ["B", 6]], [[7, 23], ["B", 7]], [[8, 24], ["B", 8]], [[9, 25], ["B", 9]], [[10, 26], ["B", 10]], [[11, 27], ["B", 11]], [[12, 28], ["B", 12]], [[13, 29], ["B", 13]], [[14, 30], ["B", 14]], [[15, 132], ["B", 15]], [[34, 35], ["D", 1]], [[35, 36], ["D", 2]], [[36, 37], ["D", 3]], [[37, 38], ["D", 4]], [[38, 39], ["D", 5]], [[39, 40], ["D", 6]], [[43, 44], ["C", 1]], [[44, 45], ["C", 2]], [[45, 46], ["C", 3]], [[49, 50], ["circle", 1]], [[50, 51], ["circle", 2]], [[51, 52], ["circle", 3]], [[52, 53], ["circle", 4]], [[53, 54], ["circle", 5]], [[54, 55], ["circle", 6]], [[55, 56], ["circle", 7]], [[56, 57], ["circle", 8]], [[57, 58], ["circle", 9]], [[58, 59], ["circle", 10]], [[59, 60], ["circle", 11]], [[60, 61], ["circle", 12]], [[61, 62], ["circle", 13]]];
      beacons = beacons.filter(function(_item) {
        return _item.rssi !== 0;
      });
      candidate = [];
      for (i = 0, len = map.length; i < len; i++) {
        _map = map[i];
        ref = _map[0], a = ref[0], b = ref[1];
        beacon_a = beacons.filter(function(_item) {
          return _item.minor === a;
        });
        beacon_b = beacons.filter(function(_item) {
          return _item.minor === b;
        });
        if (beacon_a.length > 0 && beacon_b.length > 0) {
          candidate.push({
            rssi: (beacon_a[0].rssi + beacon_b[0].rssi) / 2,
            point: _map[1],
            minor: _map[0]
          });
        }
      }
      if (candidate.length === 0) {
        return null;
      }
      candidate.sort(function(x, y) {
        return y.rssi - x.rssi;
      });
      if (filter_near > 0) {
        if (candidate.length > 1 && candidate[0]['rssi'] - candidate[1]['rssi'] <= filter_near) {
          return null;
        }
      }
      if (check_nearest) {
        beacons.sort(function(x, y) {
          return y.rssi - x.rssi;
        });
        if (candidate[0].minor.indexOf(beacons[0]['minor']) === -1) {
          return null;
        }
      }
      return candidate[0].point;
    };
    d = this.buffer.last(WINDOW_SIZE)[0];
    accuracy = 1;
    ret = nearestD(d, this.compass, 6);
    algorithm = 'nearestD';
    if (ret == null) {
      ret = nearest2_v21(d, 3);
      algorithm = 'nearest2';
      if (ret == null) {
        accuracy = 0.6;
        ret = nearest1(d, 6);
        algorithm = 'nearest1';
        if (ret == null) {
          accuracy = 0.3;
          ret = nearest2_v21(d, 1);
          algorithm = 'nearest2';
          if (ret == null) {
            ret = nearest1(d);
            accuracy = 0;
            if (ret == null) {
              accuracy = 0;
              algorithm = null;
            }
          }
        }
      }
    }
    this.positionAccuracy = accuracy;
    if (ret != null) {
      p = POINT_2_LATLNG.filter(function(row) {
        return row.lane === ret[0] && row.point === ret[1];
      })[0];
      if (p != null) {
        if (true) {
          this.lane = p.lane;
          this.position = p.point;
          this.positionLatLng = p.latlng;
        }
      }
    }
    d = d.filter(function(_b) {
      return _b.rssi !== 0;
    });
    d.sort(function(_a, _b) {
      return _b.rssi - _a.rssi;
    });
    text = JSON.stringify({
      accuracy: accuracy != null ? accuracy : null,
      algorithm: algorithm != null ? algorithm : null,
      rssi: {
        0: String((ref = d[0]) != null ? ref.minor : void 0) + ' ' + String((ref1 = d[0]) != null ? ref1.rssi : void 0),
        1: String((ref2 = d[1]) != null ? ref2.minor : void 0) + ' ' + String((ref3 = d[1]) != null ? ref3.rssi : void 0),
        diff: ((ref4 = d[0]) != null ? ref4.rssi : void 0) - ((ref5 = d[1]) != null ? ref5.rssi : void 0)
      }
    }, null, 2);
    $('#info').text(text);
    return true;
  };

  Kanikama.prototype.sabaePositionDetector2F = function() {
    var POINT_2_LATLNG, WINDOW_SIZE, accuracy, algorithm, d, nearest1, nearest2_v21, nearestD, p, ref, ref1, ref2, ref3, ref4, ref5, ret, text;
    WINDOW_SIZE = 1;
    POINT_2_LATLNG = [
      {
        'lane': 'A',
        'latlng': [136.18664149707814, 35.961922650475515],
        'point': 1
      }, {
        'lane': 'A',
        'latlng': [136.18664090411215, 35.96190136111812],
        'point': 2
      }, {
        'lane': 'A',
        'latlng': [136.1866403474554, 35.961880744854575],
        'point': 3
      }, {
        'lane': 'A',
        'latlng': [136.18663936665007, 35.96186050324796],
        'point': 4
      }, {
        'lane': 'A',
        'latlng': [136.18663798543406, 35.96183901695468],
        'point': 5
      }, {
        'lane': 'A',
        'latlng': [136.186636778032, 35.961818693439],
        'point': 6
      }, {
        'lane': 'A',
        'latlng': [136.18663599524763, 35.961800063339226],
        'point': 7
      }, {
        'lane': 'A',
        'latlng': [136.18664209004413, 35.961943939832906],
        'point': 0
      }, {
        'lane': 'A',
        'latlng': [136.18663521246324, 35.96178143323945],
        'point': 8
      }, {
        'lane': 'B',
        'latlng': [136.1865081258662, 35.961814383130005],
        'point': 1
      }, {
        'lane': 'B',
        'latlng': [136.18649116148566, 35.9618149826434],
        'point': 2
      }, {
        'lane': 'B',
        'latlng': [136.18647231217363, 35.96181564876941],
        'point': 3
      }, {
        'lane': 'B',
        'latlng': [136.18645268671315, 35.96181634232413],
        'point': 4
      }, {
        'lane': 'B',
        'latlng': [136.18652509024673, 35.961813783616606],
        'point': 0
      }, {
        'lane': 'B',
        'latlng': [136.18643306125267, 35.961817035878845],
        'point': 5
      }, {
        'lane': 'C',
        'latlng': [136.18648076714635, 35.961876628358254],
        'point': 1
      }, {
        'lane': 'C',
        'latlng': [136.1864798667226, 35.96185993563094],
        'point': 2
      }, {
        'lane': 'C',
        'latlng': [136.1865110434673, 35.96185096612878],
        'point': 3
      }, {
        'lane': 'C',
        'latlng': [136.18654306739097, 35.961857702149636],
        'point': 4
      }, {
        'lane': 'C',
        'latlng': [136.18654415108932, 35.96187470310983],
        'point': 5
      }, {
        'lane': 'C',
        'latlng': [136.1864816675701, 35.96189332108557],
        'point': 0
      }, {
        'lane': 'C',
        'latlng': [136.18654523478767, 35.96189170407002],
        'point': 6
      }, {
        'lane': 'D',
        'latlng': [136.18655039499117, 35.961835998008716],
        'point': 1
      }, {
        'lane': 'E',
        'latlng': [136.18659600073724, 35.961966833958826],
        'point': 1
      }, {
        'lane': 'E',
        'latlng': [136.18658901475447, 35.961985603727015],
        'point': 2
      }, {
        'lane': 'E',
        'latlng': [136.18657058471123, 35.96198580545023],
        'point': 3
      }, {
        'lane': 'E',
        'latlng': [136.18655019274166, 35.96198670592536],
        'point': 4
      }, {
        'lane': 'F',
        'latlng': [136.1865445207419, 35.96173945498899],
        'point': 1
      }
    ];
    nearest1 = function(beacons, filter_near) {
      var e, error, map;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = {
        "76": ["A", 0],
        "83": ["A", 8],
        "71": ["B", 0],
        "75": ["B", 5],
        "64": ["C", 0],
        "69": ["C", 6],
        "70": ["D", 1],
        "85": ["E", 1],
        "86": ["E", 2],
        "87": ["E", 3],
        "88": ["E", 4],
        "84": ["F", 1]
      };
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      try {
        if (filter_near > 0 && beacons.length > 1 && beacons[0].rssi - beacons[1].rssi <= filter_near) {
          return null;
        }
        return map[beacons[0].minor];
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearestD = function(beacons, heading, filter_near) {
      var _heading, _map, e, error, heading_offset, map, offsets, wide;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = {};
      offsets = {
        'A': 90,
        'C': 90
      };
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      try {
        if (filter_near > 0 && beacons.length > 1 && beacons[0]['rssi'] - beacons[1]['rssi'] < filter_near) {
          return null;
        }
        _map = map[beacons[0].minor];
        heading_offset = offsets[_map[0][0]];
        wide = 90;
        _heading = heading + heading_offset;
        if (_heading < 0) {
          _heading = 360 - _heading;
        }
        if (_heading >= 360) {
          _heading = _heading - 360;
        }
        console.log(heading);
        if ((90 - wide / 2 < _heading && _heading < 90 + wide / 2)) {
          return _map[1];
        }
        if ((270 - wide / 2 < _heading && _heading < 270 + wide / 2)) {
          return _map[0];
        }
        return null;
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearest2_v21 = function(beacons, filter_near, check_nearest) {
      var _map, a, b, beacon_a, beacon_b, candidate, i, len, map, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      if (check_nearest == null) {
        check_nearest = true;
      }
      map = [[[76, 77], ["A", 1]], [[77, 78], ["A", 2]], [[78, 79], ["A", 3]], [[79, 80], ["A", 4]], [[80, 81], ["A", 5]], [[81, 82], ["A", 6]], [[82, 83], ["A", 7]], [[71, 72], ["B", 1]], [[72, 73], ["B", 2]], [[73, 74], ["B", 3]], [[74, 75], ["B", 4]], [[64, 65], ["C", 1]], [[65, 66], ["C", 2]], [[66, 67], ["C", 3]], [[67, 68], ["C", 4]], [[68, 69], ["C", 5]]];
      beacons = beacons.filter(function(_item) {
        return _item.rssi !== 0;
      });
      candidate = [];
      for (i = 0, len = map.length; i < len; i++) {
        _map = map[i];
        ref = _map[0], a = ref[0], b = ref[1];
        beacon_a = beacons.filter(function(_item) {
          return _item.minor === a;
        });
        beacon_b = beacons.filter(function(_item) {
          return _item.minor === b;
        });
        if (beacon_a.length > 0 && beacon_b.length > 0) {
          candidate.push({
            rssi: (beacon_a[0].rssi + beacon_b[0].rssi) / 2,
            point: _map[1],
            minor: _map[0]
          });
        }
      }
      if (candidate.length === 0) {
        return null;
      }
      candidate.sort(function(x, y) {
        return y.rssi - x.rssi;
      });
      if (filter_near > 0) {
        if (candidate.length > 1 && candidate[0]['rssi'] - candidate[1]['rssi'] <= filter_near) {
          return null;
        }
      }
      if (check_nearest) {
        beacons.sort(function(x, y) {
          return y.rssi - x.rssi;
        });
        if (candidate[0].minor.indexOf(beacons[0]['minor']) === -1) {
          return null;
        }
      }
      return candidate[0].point;
    };
    d = this.buffer.last(WINDOW_SIZE)[0];
    accuracy = 1;
    ret = nearestD(d, this.compass, 6);
    algorithm = 'nearestD';
    if (ret == null) {
      ret = nearest2_v21(d, 3);
      algorithm = 'nearest2';
      if (ret == null) {
        accuracy = 0.9;
        ret = nearest1(d, 6);
        algorithm = 'nearest1';
        if (ret == null) {
          accuracy = 0.3;
          ret = nearest2_v21(d, 1);
          algorithm = 'nearest2';
          if (ret == null) {
            ret = nearest1(d);
            accuracy = 0;
            if (ret == null) {
              accuracy = 0;
              algorithm = null;
            }
          }
        }
      }
    }
    this.positionAccuracy = accuracy;
    if (ret != null) {
      p = POINT_2_LATLNG.filter(function(row) {
        return row.lane === ret[0] && row.point === ret[1];
      })[0];
      if (p != null) {
        if (true) {
          this.lane = p.lane;
          this.position = p.point;
          this.positionLatLng = p.latlng;
        }
      }
    }
    d = d.filter(function(_b) {
      return _b.rssi !== 0;
    });
    d.sort(function(_a, _b) {
      return _b.rssi - _a.rssi;
    });
    text = JSON.stringify({
      accuracy: accuracy != null ? accuracy : null,
      algorithm: algorithm != null ? algorithm : null,
      rssi: {
        0: String((ref = d[0]) != null ? ref.minor : void 0) + ' ' + String((ref1 = d[0]) != null ? ref1.rssi : void 0),
        1: String((ref2 = d[1]) != null ? ref2.minor : void 0) + ' ' + String((ref3 = d[1]) != null ? ref3.rssi : void 0),
        diff: ((ref4 = d[0]) != null ? ref4.rssi : void 0) - ((ref5 = d[1]) != null ? ref5.rssi : void 0)
      }
    }, null, 2);
    $('#info').text(text);
    return true;
  };

  Kanikama.prototype.rssiToAccuracy = function(rssi) {
    if (rssi > -59) {
      return 10;
    }
    return 10 / (1 - (rssi + 59) * 10 / 20);
  };

  Kanikama.prototype.onChangeFloor = function() {};

  Kanikama.prototype.sabaePositionDetectorV2 = function() {
    var POINT_2_LATLNG, WINDOW_SIZE, accuracy, algorithm, d, nearest1, nearest2, nearest2_v21, nearestD, p, ref, ref1, ref2, ref3, ref4, ref5, ret, text;
    WINDOW_SIZE = 1;
    POINT_2_LATLNG = [
      {
        "lane": "A",
        "latlng": [136.1863696569712, 35.96191126156543],
        "point": 0
      }, {
        "lane": "A",
        "latlng": [136.18639230648637, 35.961905875380126],
        "point": 1
      }, {
        "lane": "A",
        "latlng": [136.18641398322058, 35.96190510933523],
        "point": 2
      }, {
        "lane": "A",
        "latlng": [136.18643599258996, 35.96190433153515],
        "point": 3
      }, {
        "lane": "A",
        "latlng": [136.18645773928517, 35.9619038327686],
        "point": 4
      }, {
        "lane": "A",
        "latlng": [136.18647856748686, 35.96190278200115],
        "point": 5
      }, {
        "lane": "A",
        "latlng": [136.18650040327566, 35.961901875459894],
        "point": 6
      }, {
        "lane": "A",
        "latlng": [136.1865213689799, 35.961901314376206],
        "point": 7
      }, {
        "lane": "A",
        "latlng": [136.18654250584308, 35.96190083716078],
        "point": 8
      }, {
        "lane": "A",
        "latlng": [136.18656499963947, 35.961899772490426],
        "point": 9
      }, {
        "lane": "A",
        "latlng": [136.18658784059397, 35.96189896530245],
        "point": 10
      }, {
        "lane": "A",
        "latlng": [136.18661084786532, 35.96189815223689],
        "point": 11
      }, {
        "lane": "A",
        "latlng": [136.18663180388558, 35.96189741166151],
        "point": 12
      }, {
        "lane": "A",
        "latlng": [136.18665458939978, 35.96189660643273],
        "point": 13
      }, {
        "lane": "A",
        "latlng": [136.18667804018332, 35.96189577769361],
        "point": 14
      }, {
        "lane": "A",
        "latlng": [136.1867014335756, 35.961896974113614],
        "point": 15
      }, {
        "lane": "B",
        "latlng": [136.1863645958551, 35.96181743228368],
        "point": 0
      }, {
        "lane": "B",
        "latlng": [136.18638732106814, 35.96181653926824],
        "point": 1
      }, {
        "lane": "B",
        "latlng": [136.18641004628117, 35.9618156462528],
        "point": 2
      }, {
        "lane": "B",
        "latlng": [136.18643200502703, 35.96181496015777],
        "point": 3
      }, {
        "lane": "B",
        "latlng": [136.18645278986847, 35.96181413571413],
        "point": 4
      }, {
        "lane": "B",
        "latlng": [136.1864736807471, 35.961813217606256],
        "point": 5
      }, {
        "lane": "B",
        "latlng": [136.18649558647337, 35.96181257834334],
        "point": 6
      }, {
        "lane": "B",
        "latlng": [136.18651775487186, 35.961811660046926],
        "point": 7
      }, {
        "lane": "B",
        "latlng": [136.18653859515052, 35.961810833644094],
        "point": 8
      }, {
        "lane": "B",
        "latlng": [136.18655994164337, 35.96181012422727],
        "point": 9
      }, {
        "lane": "B",
        "latlng": [136.18658300674903, 35.96180935407544],
        "point": 10
      }, {
        "lane": "B",
        "latlng": [136.18660594887302, 35.96180836347738],
        "point": 11
      }, {
        "lane": "B",
        "latlng": [136.18662703027113, 35.96180788822115],
        "point": 12
      }, {
        "lane": "B",
        "latlng": [136.18664930228374, 35.96180683138758],
        "point": 13
      }, {
        "lane": "B",
        "latlng": [136.1866731362736, 35.961805899188256],
        "point": 14
      }, {
        "lane": "B",
        "latlng": [136.18669697026348, 35.961804966988936],
        "point": 15
      }, {
        "lane": "C",
        "latlng": [136.18682401061682, 35.96193899448264],
        "point": 0
      }, {
        "lane": "C",
        "latlng": [136.18682305444435, 35.96192126967809],
        "point": 1
      }, {
        "lane": "C",
        "latlng": [136.18682209827188, 35.96190354487355],
        "point": 2
      }, {
        "lane": "C",
        "latlng": [136.18682121956186, 35.96188725600254],
        "point": 3
      }, {
        "lane": "C",
        "latlng": [136.18682034085185, 35.96187096713153],
        "point": 4
      }, {
        "lane": "D",
        "latlng": [136.18627489493238, 35.96194931833726],
        "point": 0
      }, {
        "lane": "D",
        "latlng": [136.18627392194043, 35.96193127942226],
        "point": 1
      }, {
        "lane": "D",
        "latlng": [136.18627294894847, 35.96191324050726],
        "point": 2
      }, {
        "lane": "D",
        "latlng": [136.1862719807977, 35.96189529133811],
        "point": 3
      }, {
        "lane": "D",
        "latlng": [136.18627098118253, 35.96187675882095],
        "point": 4
      }, {
        "lane": "D",
        "latlng": [136.18626991863806, 35.96185705960781],
        "point": 5
      }, {
        "lane": "D",
        "latlng": [136.18627059384187, 35.961836624606605],
        "point": 6
      }, {
        "lane": "main",
        "latlng": [136.18630578213975, 35.96186289564538],
        "point": 0
      }, {
        "lane": "main",
        "latlng": [136.1863093982123, 35.96192993579218],
        "point": 1
      }, {
        "lane": "main",
        "latlng": [136.18624939353526, 35.961974946694816],
        "point": 2
      }, {
        "lane": "main",
        "latlng": [136.1865991356181, 35.96199405792012],
        "point": 3
      }, {
        "lane": "main",
        "latlng": [136.18667132039457, 35.96206775650696],
        "point": 4
      }, {
        "lane": "main",
        "latlng": [136.186868095626, 35.961953082088385],
        "point": 5
      }, {
        "lane": "main",
        "latlng": [136.1868959775686, 35.961924222503306],
        "point": 6
      }, {
        "lane": "main",
        "latlng": [136.18645326254045, 35.96199795415883],
        "point": 7
      }, {
        "lane": "circle",
        "latlng": [136.18688711744204, 35.96182176055322],
        "point": 0
      }, {
        "lane": "circle",
        "latlng": [136.18690607068305, 35.96180139894392],
        "point": 1
      }, {
        "lane": "circle",
        "latlng": [136.18692502392406, 35.96178103733462],
        "point": 2
      }, {
        "lane": "circle",
        "latlng": [136.18693411312233, 35.96175801209845],
        "point": 3
      }, {
        "lane": "circle",
        "latlng": [136.18693403260326, 35.96173283820016],
        "point": 4
      }, {
        "lane": "circle",
        "latlng": [136.1869257398401, 35.96170781964384],
        "point": 5
      }, {
        "lane": "circle",
        "latlng": [136.186907531943, 35.96168845658414],
        "point": 6
      }, {
        "lane": "circle",
        "latlng": [136.1868815979032, 35.96167620025106],
        "point": 7
      }, {
        "lane": "circle",
        "latlng": [136.18685298727485, 35.961669928067366],
        "point": 8
      }, {
        "lane": "circle",
        "latlng": [136.18682419286148, 35.96167157506923],
        "point": 9
      }, {
        "lane": "circle",
        "latlng": [136.1867980468882, 35.96168113108361],
        "point": 10
      }, {
        "lane": "circle",
        "latlng": [136.18677661682983, 35.961695735621504],
        "point": 11
      }, {
        "lane": "circle",
        "latlng": [136.18676168883835, 35.96171555035333],
        "point": 12
      }, {
        "lane": "circle",
        "latlng": [136.18675283853224, 35.9617399158996],
        "point": 13
      }, {
        "lane": "circle",
        "latlng": [136.18674398822614, 35.961764281445866],
        "point": 14
      }
    ];
    nearest1 = function(beacons, filter_near) {
      var e, error, map;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = {
        "131": ["B", 0],
        "1": ["B", 1],
        "2": ["B", 2],
        "3": ["B", 3],
        "4": ["B", 4],
        "5": ["B", 5],
        "6": ["B", 6],
        "7": ["B", 7],
        "8": ["B", 8],
        "9": ["B", 9],
        "10": ["B", 10],
        "11": ["B", 11],
        "12": ["B", 12],
        "13": ["B", 13],
        "14": ["B", 14],
        "15": ["B", 15],
        "16": ["B", 0],
        "17": ["B", 1],
        "18": ["B", 2],
        "19": ["B", 3],
        "20": ["B", 4],
        "21": ["B", 5],
        "22": ["B", 6],
        "23": ["B", 7],
        "24": ["B", 8],
        "25": ["B", 9],
        "26": ["B", 10],
        "27": ["B", 11],
        "28": ["B", 12],
        "29": ["B", 13],
        "30": ["B", 14],
        "132": ["B", 15],
        "133": ["A", 0],
        "101": ["A", 1],
        "102": ["A", 2],
        "103": ["A", 3],
        "104": ["A", 4],
        "105": ["A", 5],
        "106": ["A", 6],
        "107": ["A", 7],
        "108": ["A", 8],
        "109": ["A", 9],
        "110": ["A", 10],
        "111": ["A", 11],
        "112": ["A", 12],
        "113": ["A", 13],
        "114": ["A", 14],
        "115": ["A", 15],
        "116": ["A", 0],
        "117": ["A", 1],
        "118": ["A", 2],
        "119": ["A", 3],
        "120": ["A", 4],
        "121": ["A", 5],
        "122": ["A", 6],
        "123": ["A", 7],
        "124": ["A", 8],
        "125": ["A", 9],
        "126": ["A", 10],
        "127": ["A", 11],
        "128": ["A", 12],
        "129": ["A", 13],
        "130": ["A", 14],
        "134": ["A", 15],
        "48": ["main", 6],
        "33": ["main", 2],
        "32": ["main", 1],
        "31": ["main", 0],
        "42": ["main", 4],
        "41": ["main", 3],
        "63": ["main", 7],
        "47": ["main", 5]
      };
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      try {
        if (filter_near > 0 && beacons.length > 1 && beacons[0].rssi - beacons[1].rssi <= filter_near) {
          return null;
        }
        return map[beacons[0].minor];
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearestD = function(beacons, heading, filter_near) {
      var i, len, map, p, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = [
        {
          beacon: 40,
          point: ["D", 6],
          offset: 270,
          wide: 90
        }, {
          beacon: 39,
          point: ["D", 5],
          offset: 270,
          wide: 90
        }, {
          beacon: 38,
          point: ["D", 4],
          offset: 270,
          wide: 90
        }, {
          beacon: 37,
          point: ["D", 3],
          offset: 270,
          wide: 90
        }, {
          beacon: 36,
          point: ["D", 2],
          offset: 270,
          wide: 90
        }, {
          beacon: 35,
          point: ["D", 1],
          offset: 270,
          wide: 90
        }, {
          beacon: 34,
          point: ["D", 0],
          offset: 270,
          wide: 90
        }, {
          beacon: 46,
          point: ["C", 3],
          offset: 270,
          wide: 90
        }, {
          beacon: 45,
          point: ["C", 2],
          offset: 270,
          wide: 90
        }, {
          beacon: 44,
          point: ["C", 1],
          offset: 270,
          wide: 90
        }, {
          beacon: 43,
          point: ["C", 0],
          offset: 270,
          wide: 90
        }, {
          beacon: 40,
          point: ["D", 7],
          offset: 90,
          wide: 90
        }, {
          beacon: 39,
          point: ["D", 6],
          offset: 90,
          wide: 90
        }, {
          beacon: 38,
          point: ["D", 5],
          offset: 90,
          wide: 90
        }, {
          beacon: 37,
          point: ["D", 4],
          offset: 90,
          wide: 90
        }, {
          beacon: 36,
          point: ["D", 3],
          offset: 90,
          wide: 90
        }, {
          beacon: 35,
          point: ["D", 2],
          offset: 90,
          wide: 90
        }, {
          beacon: 34,
          point: ["D", 1],
          offset: 90,
          wide: 90
        }, {
          beacon: 46,
          point: ["C", 4],
          offset: 90,
          wide: 90
        }, {
          beacon: 45,
          point: ["C", 3],
          offset: 90,
          wide: 90
        }, {
          beacon: 44,
          point: ["C", 2],
          offset: 90,
          wide: 90
        }, {
          beacon: 43,
          point: ["C", 1],
          offset: 90,
          wide: 90
        }
      ];
      beacons = beacons.filter(function(_b) {
        return _b.rssi !== 0;
      });
      beacons.sort(function(_a, _b) {
        return _b.rssi - _a.rssi;
      });
      if (filter_near > 0 && beacons.length > 1 && beacons[0]['rssi'] - beacons[1]['rssi'] < filter_near) {
        return null;
      }
      for (i = 0, len = map.length; i < len; i++) {
        p = map[i];
        if (p.beacon === beacons[0].minor) {
          if (((90 - p.wide / 2) < (ref = (heading + p.offset) % 360) && ref < (90 + p.wide / 2))) {
            return p.point;
          }
        }
      }
      return null;
    };
    nearest2 = function(beacons, filter_near) {
      var _map, a, b, beacon_a, beacon_b, candidate, e, error, i, len, map, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      map = [[[133, 116], ["A", 0]], [[101, 117], ["A", 1]], [[102, 118], ["A", 2]], [[103, 119], ["A", 3]], [[104, 120], ["A", 4]], [[105, 121], ["A", 5]], [[106, 122], ["A", 6]], [[107, 123], ["A", 7]], [[108, 124], ["A", 8]], [[109, 125], ["A", 9]], [[110, 126], ["A", 10]], [[111, 127], ["A", 11]], [[112, 128], ["A", 12]], [[113, 129], ["A", 13]], [[114, 130], ["A", 14]], [[115, 134], ["A", 15]], [[131, 16], ["B", 0]], [[1, 17], ["B", 1]], [[2, 18], ["B", 2]], [[3, 19], ["B", 3]], [[4, 20], ["B", 4]], [[5, 21], ["B", 5]], [[6, 22], ["B", 6]], [[7, 23], ["B", 7]], [[8, 24], ["B", 8]], [[9, 25], ["B", 9]], [[10, 26], ["B", 10]], [[11, 27], ["B", 11]], [[12, 28], ["B", 12]], [[13, 29], ["B", 13]], [[14, 30], ["B", 14]], [[15, 132], ["B", 15]], [[34, 35], ["D", 1]], [[35, 36], ["D", 2]], [[36, 37], ["D", 3]], [[37, 38], ["D", 4]], [[38, 39], ["D", 5]], [[39, 40], ["D", 6]], [[43, 44], ["C", 1]], [[44, 45], ["C", 2]], [[45, 46], ["C", 3]], [[49, 50], ["circle", 1]], [[50, 51], ["circle", 2]], [[51, 52], ["circle", 3]], [[52, 53], ["circle", 4]], [[53, 54], ["circle", 5]], [[54, 55], ["circle", 6]], [[55, 56], ["circle", 7]], [[56, 57], ["circle", 8]], [[57, 58], ["circle", 9]], [[58, 59], ["circle", 10]], [[59, 60], ["circle", 11]], [[60, 61], ["circle", 12]], [[61, 62], ["circle", 13]]];
      candidate = [];
      for (i = 0, len = map.length; i < len; i++) {
        _map = map[i];
        ref = _map[0], a = ref[0], b = ref[1];
        beacon_a = beacons.filter(function(_item) {
          return _item.rssi !== 0 && _item.minor === a;
        });
        beacon_b = beacons.filter(function(_item) {
          return _item.rssi !== 0 && _item.minor === b;
        });
        if (beacon_a.length > 0 && beacon_b.length > 0) {
          candidate.push({
            rssi: (beacon_a[0].rssi + beacon_b[0].rssi) / 2,
            point: _map[1]
          });
        }
      }
      candidate.sort(function(x, y) {
        return y.rssi - x.rssi;
      });
      try {
        if (filter_near > 0 && candidate.length > 1 && candidate[0].rssi - candidate[1].rssi <= filter_near) {
          return null;
        }
        return candidate[0].point;
      } catch (error) {
        e = error;
        return null;
      }
    };
    nearest2_v21 = function(beacons, filter_near, check_nearest) {
      var _map, a, b, beacon_a, beacon_b, candidate, i, len, map, ref;
      if (filter_near == null) {
        filter_near = 0;
      }
      if (check_nearest == null) {
        check_nearest = true;
      }
      map = [[[133, 116], ["A", 0]], [[101, 117], ["A", 1]], [[102, 118], ["A", 2]], [[103, 119], ["A", 3]], [[104, 120], ["A", 4]], [[105, 121], ["A", 5]], [[106, 122], ["A", 6]], [[107, 123], ["A", 7]], [[108, 124], ["A", 8]], [[109, 125], ["A", 9]], [[110, 126], ["A", 10]], [[111, 127], ["A", 11]], [[112, 128], ["A", 12]], [[113, 129], ["A", 13]], [[114, 130], ["A", 14]], [[115, 134], ["A", 15]], [[131, 16], ["B", 0]], [[1, 17], ["B", 1]], [[2, 18], ["B", 2]], [[3, 19], ["B", 3]], [[4, 20], ["B", 4]], [[5, 21], ["B", 5]], [[6, 22], ["B", 6]], [[7, 23], ["B", 7]], [[8, 24], ["B", 8]], [[9, 25], ["B", 9]], [[10, 26], ["B", 10]], [[11, 27], ["B", 11]], [[12, 28], ["B", 12]], [[13, 29], ["B", 13]], [[14, 30], ["B", 14]], [[15, 132], ["B", 15]], [[34, 35], ["D", 1]], [[35, 36], ["D", 2]], [[36, 37], ["D", 3]], [[37, 38], ["D", 4]], [[38, 39], ["D", 5]], [[39, 40], ["D", 6]], [[43, 44], ["C", 1]], [[44, 45], ["C", 2]], [[45, 46], ["C", 3]], [[49, 50], ["circle", 1]], [[50, 51], ["circle", 2]], [[51, 52], ["circle", 3]], [[52, 53], ["circle", 4]], [[53, 54], ["circle", 5]], [[54, 55], ["circle", 6]], [[55, 56], ["circle", 7]], [[56, 57], ["circle", 8]], [[57, 58], ["circle", 9]], [[58, 59], ["circle", 10]], [[59, 60], ["circle", 11]], [[60, 61], ["circle", 12]], [[61, 62], ["circle", 13]]];
      beacons = beacons.filter(function(_item) {
        return _item.rssi !== 0;
      });
      candidate = [];
      for (i = 0, len = map.length; i < len; i++) {
        _map = map[i];
        ref = _map[0], a = ref[0], b = ref[1];
        beacon_a = beacons.filter(function(_item) {
          return _item.minor === a;
        });
        beacon_b = beacons.filter(function(_item) {
          return _item.minor === b;
        });
        if (beacon_a.length > 0 && beacon_b.length > 0) {
          candidate.push({
            rssi: (beacon_a[0].rssi + beacon_b[0].rssi) / 2,
            point: _map[1],
            minor: _map[0]
          });
        }
      }
      if (candidate.length === 0) {
        return null;
      }
      candidate.sort(function(x, y) {
        return y.rssi - x.rssi;
      });
      if (filter_near > 0) {
        if (candidate.length > 1 && candidate[0]['rssi'] - candidate[1]['rssi'] <= filter_near) {
          return null;
        }
      }
      if (check_nearest) {
        beacons.sort(function(x, y) {
          return y.rssi - x.rssi;
        });
        if (candidate[0].minor.indexOf(beacons[0]['minor']) === -1) {
          return null;
        }
      }
      return candidate[0].point;
    };
    d = this.buffer.last(WINDOW_SIZE)[0];
    accuracy = 1;
    ret = nearestD(d, this.compass, 6);
    algorithm = 'nearestD';
    if (ret == null) {
      ret = nearest2_v21(d, 3);
      algorithm = 'nearest2';
      if (ret == null) {
        accuracy = 0.6;
        ret = nearest1(d, 6);
        algorithm = 'nearest1';
        if (ret == null) {
          accuracy = 0.3;
          ret = nearest2_v21(d, 1);
          algorithm = 'nearest2';
          if (ret == null) {
            ret = nearest1(d);
            accuracy = 0;
            if (ret == null) {
              accuracy = 0;
              algorithm = null;
            }
          }
        }
      }
    }
    this.algorithm = algorithm;
    this.positionAccuracy = accuracy;
    if (ret != null) {
      p = POINT_2_LATLNG.filter(function(row) {
        return row.lane === ret[0] && row.point === ret[1];
      })[0];
      if (p != null) {
        if (true) {
          this.lane = p.lane;
          this.position = p.point;
          this.positionLatLng = p.latlng;
        }
      }
    }
    d = d.filter(function(_b) {
      return _b.rssi !== 0;
    });
    d.sort(function(_a, _b) {
      return _b.rssi - _a.rssi;
    });
    text = JSON.stringify({
      accuracy: accuracy != null ? accuracy : null,
      algorithm: algorithm != null ? algorithm : null,
      rssi: {
        0: String((ref = d[0]) != null ? ref.minor : void 0) + ' ' + String((ref1 = d[0]) != null ? ref1.rssi : void 0),
        1: String((ref2 = d[1]) != null ? ref2.minor : void 0) + ' ' + String((ref3 = d[1]) != null ? ref3.rssi : void 0),
        diff: ((ref4 = d[0]) != null ? ref4.rssi : void 0) - ((ref5 = d[1]) != null ? ref5.rssi : void 0)
      }
    }, null, 2);
    $('#info').text(text);
    return true;
  };

  return Kanikama;

})();

var appTest_1f, appTest_2f, centerAdjusted, didRangeBeaconsInRegion, extent, facilityTable, homeRotaion, initialize, invalidateCompass, invalidatePositionButton, kLayer, kanikama, kanimarker, loadFloor, map, view;

view = new ol.View({
  center: [15139450.747885207, 4163881.1440642904],
  zoom: 6
});

homeRotaion = 3.1115421869123563;

kLayer = new Kanilayer();

kanikama = new Kanikama();

kanikama.onChangeFloor = function() {
  if (kanikama.floor !== null) {
    return loadFloor(kanikama.floor.id);
  }
};

map = null;

kanimarker = null;

facilityTable = null;

loadFloor = function(id) {
  var button, floor, i, len, ref;
  kanimarker.setPosition(null);
  kLayer.setFloorId(id);
  setTimeout(function() {
    var calcDeg, extent, geojson, newAngle, oldAngle, pan, rotate, zoom;
    calcDeg = function(ra, rb) {
      var diff;
      diff = (ra % 360) - (rb % 360);
      if (diff < 0) {
        if (diff <= -180) {
          diff = 360 - (diff * -1);
        } else {
          diff = diff * -1;
        }
      } else {
        if (diff > 180) {
          diff = 360 - diff;
        } else {
          diff = diff * -1;
        }
      }
      return ra + diff;
    };
    geojson = kanikama.geojsons[7][id];
    if (geojson != null) {
      extent = new ol.extent.boundingExtent([ol.proj.transform([geojson.bbox[0], geojson.bbox[1]], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([geojson.bbox[2], geojson.bbox[3]], 'EPSG:4326', 'EPSG:3857')]);
      pan = ol.animation.pan({
        easing: ol.easing.elastic,
        duration: 800,
        source: view.getCenter()
      });
      map.beforeRender(pan);
      zoom = ol.animation.zoom({
        easing: ol.easing.elastic,
        duration: 800,
        resolution: map.getView().getResolution()
      });
      map.beforeRender(zoom);
      oldAngle = view.getRotation() * 180 / Math.PI;
      newAngle = homeRotaion * 180 / Math.PI;
      if (Math.abs(oldAngle - newAngle) > 20) {
        rotate = ol.animation.rotate({
          duration: 400,
          rotation: view.getRotation()
        });
        map.beforeRender(rotate);
        view.setRotation(calcDeg(oldAngle, newAngle) * Math.PI / 180);
      }
      return view.fit(extent, map.getSize());
    }
  }, 100);
  button = $('#floor-button');
  button.empty();
  if (facilityTable.table.length > 1) {
    ref = facilityTable.table;
    for (i = 0, len = ref.length; i < len; i++) {
      floor = ref[i];
      button.append("<div class=\"button\" id=\"" + floor.floor_id + "\">" + floor.label + "</div>");
      $('#' + floor.floor_id).on('click', function() {
        var id_;
        id_ = $(this).attr('id');
        return loadFloor(id_);
      });
    }
    return $('#' + id).addClass('active');
  }
};

didRangeBeaconsInRegion = function(beacons) {
  var accuracy, b, center, e, error, i, latlng, len, newAcc;
  if ((typeof device !== "undefined" && device !== null ? device.platform : void 0) === 'Android') {
    for (i = 0, len = beacons.length; i < len; i++) {
      b = beacons[i];
      b.major = Number(b.major);
      b.minor = Number(b.minor);
    }
  }
  center = null;
  accuracy = null;
  try {
    kanikama.pushBeacons(beacons);
    latlng = kanikama.positionLatLng;
    newAcc = kanikama.positionAccuracy;
    center = ol.proj.transform(latlng, 'EPSG:4326', 'EPSG:3857');
    accuracy = 6.0;
    if (newAcc >= 0) {
      accuracy = 6.0;
    }
    if (newAcc >= 0.3) {
      accuracy = 4.0;
    }
    if (newAcc >= 0.9) {
      accuracy = 0.1;
    }
  } catch (error) {
    e = error;
    console.error(e);
  }
  if (kanikama.floor != null) {
    return kanimarker.setPosition(center, accuracy);
  } else {
    return kanimarker.setPosition(null);
  }
};

initialize = function() {
  var compassError, compassSuccess, delegate, loadGeoJSON, locationManager, ref, region;
  $('.message_close').on('click', function() {
    $($(this).parent()).fadeOut(200);
    return $(this).parent().attr('user_closed', true);
  });
  window.open = cordova.InAppBrowser.open;
  compassSuccess = function(heading) {
    kanikama.pushCompass(heading.magneticHeading);
    kanimarker.setDirection(parseInt(heading.magneticHeading));
  };
  compassError = function(e) {
    alert("コンパスエラー コード:" + e.code);
  };
  navigator.compass.watchHeading(compassSuccess, compassError, {
    frequency: 100
  });
  if (((ref = cordova.plugins) != null ? ref.locationManager : void 0) != null) {
    locationManager = cordova.plugins.locationManager;
    locationManager.requestWhenInUseAuthorization();
    delegate = new locationManager.Delegate();
    delegate.didRangeBeaconsInRegion = function(arg) {
      var beacons;
      beacons = arg.beacons;
      return didRangeBeaconsInRegion.apply(window, [beacons]);
    };
    locationManager.setDelegate(delegate);
    region = new locationManager.BeaconRegion('warabi', '00000000-71C7-1001-B000-001C4D532518');
    locationManager.startRangingBeaconsInRegion(region).fail(alert);
  }
  if (navigator.splashscreen != null) {
    navigator.splashscreen.hide();
  }
  loadGeoJSON = function() {
    $.when($.getJSON('https://app.haika.io/api/facility/7'), $.getJSON('https://app.haika.io/api/facility/7/7.geojson'), $.getJSON('https://app.haika.io/api/facility/7/8.geojson')).done(function() {
      var data, i, len;
      for (i = 0, len = arguments.length; i < len; i++) {
        data = arguments[i];
        if (data[1] === 'success') {
          if (data[0].table != null) {
            facilityTable = data[0];
            facilityTable.table.reverse();
          } else {
            kanikama.addGeoJSON(data[0]);
          }
        }
      }
      return loadFloor(7);
    });
  };
  if (navigator.connection.type === 'none') {
    setTimeout(function() {
      return $.notify('オンラインになるのを待っています', {
        delay: 10 * 1000
      });
    }, 1000);
    document.addEventListener('online', loadGeoJSON, false);
  } else {
    loadGeoJSON();
  }
};

$(document).on('ready', map = new ol.Map({
  layers: [
    new ol.layer.Tile({
      source: new ol.source.XYZ({
        url: 'https://api.tiles.mapbox.com/v4/caliljp.ihofg5ie/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiY2FsaWxqcCIsImEiOiJxZmNyWmdFIn0.hgdNoXE7D6i7SrEo6niG0w',
        maxZoom: 22
      }),
      minResolution: 0.1,
      maxResolution: 2000000,
      preload: 3
    }), kLayer
  ],
  controls: [],
  target: 'map',
  maxZoom: 26,
  minZoom: 18,
  logo: false,
  view: view
}), kanimarker = new Kanimarker(map), extent = [15160175.492232606, 4295344.11748085, 15160265.302530615, 4295432.24882111], view.fit(extent, map.getSize()), view.setRotation(178 * Math.PI / 180), centerAdjusted = false, invalidatePositionButton = function() {
  $('#position-mode').addClass('position-mode-normal');
  $('#position-mode').removeClass('position-mode-heading');
  $('#position-mode').removeClass('position-mode-center');
  if (kanimarker.headingUp) {
    return $('#position-mode').addClass('position-mode-heading');
  } else {
    if (centerAdjusted) {
      return $('#position-mode').addClass('position-mode-center');
    } else {
      return $('#position-mode').addClass('position-mode-normal');
    }
  }
}, map.on('pointerdrag', function() {
  if (centerAdjusted) {
    centerAdjusted = false;
    return invalidatePositionButton();
  }
}), kanimarker.on('change:headingup', function(headingup) {
  return invalidatePositionButton();
}), $('#position-mode').on('click', function() {
  if (cordova.plugins.BluetoothStatus.hasBTLE && !cordova.plugins.BluetoothStatus.BTenabled) {
    $.notify('Bluetoothをオンにしてください', {
      placement: {
        from: 'bottom',
        align: 'right'
      }
    });
  } else if (kanimarker.position === null) {
    $.notify('現在地が取得できません', {
      placement: {
        from: 'bottom',
        align: 'right'
      }
    });
  } else {
    if (kanimarker.headingUp) {
      kanimarker.setHeadingUp(false);
      map.getView().setRotation(0);
      map.getView().setCenter(kanimarker.position);
      centerAdjusted = true;
    } else {
      if (centerAdjusted) {
        kanimarker.setHeadingUp(true);
      } else {
        view.setRotation(homeRotaion);
        if (kanimarker.position !== null) {
          view.setCenter(kanimarker.position);
          centerAdjusted = true;
        }
      }
    }
    invalidatePositionButton();
  }
}), invalidateCompass = function(view_) {
  var deg, rotation, zoom;
  rotation = view_.getRotation();
  zoom = view_.getZoom();
  $('#compass').css('transform', "rotate(" + rotation + "rad)");
  deg = (rotation * 180 / Math.PI) % 360;
  if (deg < 0) {
    deg += 360;
  }
  if ((deg === 0) || (zoom > 20)) {
    return $('#compass').addClass('ol-hidden');
  } else {
    return $('#compass').removeClass('ol-hidden');
  }
}, view.on('change:rotation', function() {
  return invalidateCompass(this);
}), view.on('change:resolution', function() {
  return invalidateCompass(this);
}), $('#compass').on('click', function() {
  var rotation;
  kanimarker.setHeadingUp(false);
  rotation = view.getRotation();
  while (rotation < -Math.PI) {
    rotation += 2 * Math.PI;
  }
  while (rotation > Math.PI) {
    rotation -= 2 * Math.PI;
  }
  map.beforeRender(ol.animation.rotate({
    duration: 400,
    rotation: rotation
  }));
  return view.setRotation(0);
}));

appTest_1f = function() {
  return didRangeBeaconsInRegion.call(window, [
    {
      "major": 105,
      "uuid": "00000000-71C7-1001-B000-001C4D532518",
      "rssi": -60,
      "minor": 1
    }
  ]);
};

appTest_2f = function() {
  return didRangeBeaconsInRegion.call(window, [
    {
      "major": 105,
      "uuid": "00000000-71C7-1001-B000-001C4D532518",
      "rssi": -60,
      "minor": 70
    }
  ]);
};

var notifyClosed = true;
$(function () {
    $(document).on('deviceready', function () {
        cordova.plugins.BluetoothStatus.initPlugin();
        $.notifyDefaults({
            z_index: 100000000,
            placement: {
                from: 'top',
                align: 'center',
                onShow: function () {
                    notifyClosed = false;
                },
                onClosed: function() {
                    notifyClosed = true;
                }
            }
        });
//            document.addEventListener('offline', function () {
//                $.notify('インターネットに接続すると、データが読み込めるようになります');
//            }, false);

        // プラグインの仕様上、初期化直後はhasBTLEが必ずfalseになるためsetTimeout()
        setTimeout(function () {
            if (cordova.plugins.BluetoothStatus.hasBTLE) {
                if (!cordova.plugins.BluetoothStatus.BTenabled) {
                    $.notify({title: '現在地を表示しよう', message: 'Bluetoothをオンにすると現在地が利用できます'});
                }
            } else {
                $.notify('この機種は現在地の表示に対応していません');
            }
        }, 5000);
    });
});

var searchSetting = {
    queryText: '', // デモ用キーワード 設定すると自動的に検索する
    targetId: "Fukui_Sabae",
    targets: [
        {
            "id": "Fukui_Sabae", //一意のID
            "name": "鯖江市図書館",
            "module": "api",
            "libid": 100622,
            "params": {"prefix": "", "systemid": "Fukui_Sabae"},
            "clickHandler":  function (data) {
                if (typeof data.shelfId != 'undefined') {
                    kLayer.setFloorId(data.floorId);
                    kLayer.setTargetShelf(data.shelfId);
                    //setVectorPoint(data.floorId, data.shelfId);
                }else{
                    kLayer.setTargetShelf(null);
                }
            }
        }
    ]
}

var Queue, ShowGoogleImage, api;

Queue = function() {
  this.__a = new Array;
};

Queue.prototype.enqueue = function(o) {
  this.__a.push(o);
};

Queue.prototype.dequeue = function() {
  if (this.__a.length > 0) {
    return this.__a.shift();
  }
  return null;
};

Queue.prototype.size = function() {
  return this.__a.length;
};

Queue.prototype.toString = function() {
  return '[' + this.__a.join(',') + ']';
};

api = (function() {
  function api() {}

  api.prototype.count = null;

  api.prototype.session = null;

  api.prototype.sysid = null;

  api.prototype.book_count = 0;

  api.prototype.render_flag = true;

  api.prototype.showImageInstance = null;

  api.prototype.continue_count = 0;

  api.prototype.queue = {};

  api.prototype.search = function(target, queryText, render) {
    var keyword, systemids;
    this.target = target;
    keyword = queryText;
    this.render = (function(_this) {
      return function() {
        if (_this.render_flag) {
          return render();
        }
      };
    })(this);
    systemids = [];
    this.target.message = '検索中...';
    systemids.push(this.target.params.systemid);
    this.render();
    this.continue_count = 0;
    this.count = null;
    this.session = null;
    this.bookimages = {};
    return $.ajax({
      url: 'https://api.calil.jp/search',
      type: 'GET',
      data: {
        f: keyword,
        sysid: systemids.join(',')
      },
      dataType: 'jsonp',
      success: (function(_this) {
        return function(data) {
          log(data);
          _this.session = data.session;
          if (data["continue"] === 1) {
            _this.result(data);
            return _this.continue_search(_this.session);
          } else {
            return _this.result(data);
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this.error();
        };
      })(this)
    });
  };

  api.prototype.continue_search = function(session) {
    if (this.render_flag === null) {
      return;
    }
    return $.ajax({
      url: 'https://api.calil.jp/search',
      type: 'GET',
      data: {
        session: session
      },
      dataType: 'jsonp',
      success: (function(_this) {
        return function(data) {
          log(data);
          if (data["continue"] === 1) {
            _this.result(data);
            if (_this.continue_count === 10) {
              _this.showAllMessage('検索に時間がかかっています...');
            } else if (_this.continue_count === 120) {
              _this.showAllMessage('検索がタイムアウトしました', true);
              return;
            }
            return setTimeout(function() {
              _this.continue_count++;
              return _this.continue_search(_this.session);
            }, 1000);
          } else {
            return _this.result(data);
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this.error();
        };
      })(this)
    });
  };

  api.prototype.stop = function() {
    this.render_flag = null;
    return this.showImageInstance = null;
  };

  api.prototype.error = function() {
    return this.showAllMessage('データ取得に失敗しました。', true);
  };

  api.prototype.showAllMessage = function(message, error) {
    if (error == null) {
      error = false;
    }
    if (this.target.complete) {
      return;
    }
    this.target.message = message;
    if (error === true) {
      this.target.error = true;
      this.target.complete = true;
    }
    return this.render();
  };

  api.prototype.showMessage = function(target, message) {
    target.message = message;
    return this.render();
  };

  api.prototype.showError = function(target, message) {
    target.message = message;
    target.complete = true;
    target.error = true;
    return this.render();
  };

  api.prototype.result = function(data) {
    var book, books, error, error1, j, len, new_books, ref, result, resultData;
    log(data);
    log(this.target);
    if (this.target.complete) {
      return;
    }
    resultData = data.results[this.target.params.systemid];
    if (resultData.status === 'Error') {
      this.showError(this.target, '検索エラーが発生しました。');
      return;
    }
    if (resultData.status === 'Running') {
      return;
    }
    if (resultData.status === 'OK') {
      try {
        if (data.results[this.target.params.systemid] == null) {
          this.showError(this.target, '検索の読み込みに失敗しました。');
          return;
        }
      } catch (error1) {
        error = error1;
        this.showError(this.target, '検索に失敗しました。');
        return;
      }
      books = resultData.books;
      log(books);
      this.count = resultData.count;
      if (books.length <= 0) {
        this.showError(this.target, '本が見つかりませんでした。');
        return;
      }
      new_books = [];
      ref = books.slice(0, 20);
      for (j = 0, len = ref.length; j < len; j++) {
        book = ref[j];
        book.id = book.K;
        book.title = book.T;
        book.url = book.U;
        new_books.push(book);
      }
      result = data.results[this.target.params.systemid];
      this.target.count = result.count;
      this.target.books = result.books;
      this.target.opacurl = result.opacurl;
      this.target.complete = true;
      this.target.message = null;
      this.target.error = false;
      this.bookimages[this.target.id] = {};
      this.queue[this.target.id] = new Queue();
      $(books).each((function(_this) {
        return function(i, e) {
          if (i > 10) {
            return false;
          }
          return _this.queue[_this.target.id].enqueue(e.K);
        };
      })(this));
      log(this.target);
      this.detail(this.target);
    }
    return this.render();
  };

  api.prototype.bookimages = {};

  api.prototype.detail = function(target) {
    var id, params;
    id = this.queue[target.id].dequeue();
    log(id);
    if (id === null) {
      return;
    }
    params = {
      k: id,
      s: target.params.systemid,
      session: this.session
    };
    return $.ajax({
      url: 'https://api.calil.jp/search_warabi_v1',
      type: 'GET',
      processData: true,
      data: params,
      dataType: 'jsonp',
      timeout: 5000,
      success: (function(_this) {
        return function(data) {
          var $image, border;
          log(data);
          $('#' + id).closest('.book').attr('data', JSON.stringify(data));
          $('#stock' + id).html(data.html);
          if (data.isbn && data.isbn !== "") {
            $image = $('#image' + id);
            border = $image.css('border');
            $image.attr('src', 'https://images-na.ssl-images-amazon.com/images/P/' + data.isbn + '.09.MZZZZZZZ.jpg').css('border', 'none');
            $image.load(function() {
              var height;
              height = $(this).css('height');
              $(this).css('height', 'auto');
              if (this.width === 1) {
                this.src = 'https://calil.jp/public/img/no-image/medium-noborder.gif';
                return $(this).css('height', height).css('border', border);
              }
            });
            return _this.bookimages[target.id][data.isbn] = {
              id: id,
              url: data.url
            };
          }
        };
      })(this),
      error: (function(_this) {
        return function() {};
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.detail(target);
        };
      })(this)
    });
  };

  return api;

})();

ShowGoogleImage = (function() {
  function ShowGoogleImage() {}

  ShowGoogleImage.prototype.show = function(bookimages) {
    var book, isbn, isbns, j, len, params, query;
    log(bookimages);
    isbns = [];
    for (isbn in bookimages) {
      book = bookimages[isbn];
      isbns.push(isbn);
      $('#image' + book.id).attr('id', 'image' + isbn);
    }
    params = [];
    for (j = 0, len = isbns.length; j < len; j++) {
      isbn = isbns[j];
      params.push('isbn:' + isbn);
    }
    query = params.join('%20OR%20');
    params = {
      'q': query,
      'country': 'JP'
    };
    return $.ajax({
      dataType: 'json',
      url: 'https://www.googleapis.com/books/v1/volumes',
      data: decodeURIComponent($.param(params)),
      crossDomain: true,
      success: (function(_this) {
        return function(gdata) {
          var i, imageurl, item, k, l, len1, len2, new_bookimages, ref, ref1, ref2;
          new_bookimages = [];
          if (gdata.totalItems > 0) {
            ref = gdata.items;
            for (k = 0, len1 = ref.length; k < len1; k++) {
              item = ref[k];
              if ((item.volumeInfo.imageLinks != null) && (item.volumeInfo.industryIdentifiers != null)) {
                ref1 = item.volumeInfo.industryIdentifiers;
                for (l = 0, len2 = ref1.length; l < len2; l++) {
                  i = ref1[l];
                  if (i.type === 'ISBN_10') {
                    isbn = i.identifier;
                  }
                }
                if (((ref2 = item.volumeInfo.imageLinks) != null ? ref2.thumbnail : void 0) != null) {
                  imageurl = _this.getImageURL(item.volumeInfo.imageLinks.thumbnail);
                  log(isbn);
                  new_bookimages.push({
                    "isbn": isbn,
                    "imageurl": imageurl
                  });
                  $('#image' + isbn).attr('src', imageurl);
                }
              }
            }
            return console.log(new_bookimages);
          }
        };
      })(this),
      error: (function(_this) {
        return function(data) {};
      })(this),
      complete: (function(_this) {
        return function() {
          return _this.animateThumb(0);
        };
      })(this)
    });
  };

  ShowGoogleImage.prototype.getImageURL = function(url) {
    var parser;
    parser = document.createElement('a');
    parser.href = url;
    parser.protocol = 'https:';
    parser.hostname = 'encrypted.google.com';
    return parser.href;
  };

  ShowGoogleImage.prototype.animateThumb = function(index) {
    var $obj;
    $obj = $(".thumbnail:eq(" + index + ")");
    if ($obj.length > 0) {
      $obj.animate({
        opacity: 1
      }, 500);
    }
    return setTimeout((function(_this) {
      return function() {
        return _this.animateThumb(index + 1);
      };
    })(this), 100);
  };

  return ShowGoogleImage;

})();

// React.js 使い方・ハマりどころのメモ
// https://www.evernote.com/l/AAGt9tKUiupOHqRT82I4O3XGVbu6eB68nHE

function log(obj) {
    console.log(obj);
}

var Search = React.createClass({
    displayName: "Search",
    getInitialState: function () {
        log('getInitialState');
        return {
            animation: true,
//      submit    : false,
            queryText: '',
        };
    },
    getDefaultProps: function () {
//    log('getDefaultProps');
        return {
            queryText: '',
            target: [],
            clickHandler: function () {
            }
        };
    },
    getTarget: function (targets, targetId) {
        for (i in targets) {
            if (targets[i].id == targetId) {
                return targets[i];
            }
        }
        return alert('図書館設定が見つかりませんでした。');
    },
    componentDidMount: function () {
        log('componentDidMount');
        log(this.props)

        this.setProps({
            targets: this.props.searchSetting.targets,
//      target : this.getTarget(this.props.searchSetting.targets, kanikama.facility.systemid),
            clickHandler: this.props.searchSetting.clickHandler
        });
        if (this.props.searchSetting.queryText != '') {
            this.setState({
                queryText: this.props.searchSetting.queryText,
            })
            $('#queryTextInput').val(this.props.searchSetting.queryText);
        }
    },
    // 検索クエリーをstateに反映
    handleUserInput: function (submit, queryText) {
        log(this.props.targets)
        var target = this.getTarget(this.props.targets, "Fukui_Sabae")
        this.setProps({
            target: target,
            clickHandler: target.clickHandler
        });
        this.setState({
            submit: submit,
            queryText: queryText,
        });
    },
    // 再レンダリング
    rerender: function () {
        this.setState({
            submit   : false,
            animation: false,
        });
    },
    render: function () {
        log('SearchBox render');
//    if(this.state.submit && this.state.queryText!=''){
        if (this.state.queryText != '') {
            var resultNode = React.createElement(SearchResult, {
                queryText: this.state.queryText,
                target: this.props.target,
                submit: this.state.submit,
                rerender: this.rerender,
                clickHandler: this.props.clickHandler
            });
        } else {
            var resultNode = null;
        }
        return (
            React.createElement("div", {className: "searchbox"},
                React.createElement(SearchBox, {
                    handleUserInput: this.handleUserInput,
                    submit: this.state.submit,
                    queryText: this.state.queryText
                }),
                resultNode
            )
        );
    }
});


// 検索ボックス
var SearchBox = React.createClass({
    displayName: "SearchBox",
    handleSubmit: function (e) {
        e.preventDefault();
        this.props.handleUserInput(
            true,
            this.refs.queryTextInput.getDOMNode().value
        );
        this.refs.queryTextInput.getDOMNode().blur()
    },
    componentDidMount: function () {
        var textInputNode = this.refs.queryTextInput.getDOMNode();
        if (this.props.queryText != '') {
            textInputNode.value = this.props.queryText;
        }
    },
    render: function () {
        return (
            React.createElement("div", {className: "searchBox"},
                React.createElement("form", {
                        action: "get",
                        id: "searchForm",
                        className: "form-inline",
                        onSubmit: this.handleSubmit
                    },
                    React.createElement("input", {
                        type: "search",
                        className: "",
                        id: "queryTextInput",
                        ref: "queryTextInput",
                        placeholder: "探したいこと・調べたいこと",
                        onChange: this.handleChange
                    }),
                    React.createElement("i", {className: "fa fa-search searchBtn", onClick: this.handleSubmit})
                )
            )

        );
    }
});

var SearchResult = React.createClass({
    displayName: "SearchResult",
    searchInstances: {},
    queryText: '',
    format: function () {
        // データを初期化する renderが走るのでsetPropsは使わない
        this.props.target.message = null;
        this.props.target.count = 0;
        this.props.target.books = [];
        this.props.target.bookimages = [];
        this.props.target.opacurl = null;
        this.props.target.complete = false;
        this.props.target.error    = false;
    },
    start: function () {
        this.queryText = this.props.queryText;
        this.stop();
        this.format();
        this.searchInstances['local'] = new api();
        log(this.props.target)
        this.searchInstances['local'].search(this.props.target, this.props.queryText, this.props.rerender);
    },
    stop: function () {
        // レンダリングをしないようにする
        if (typeof this.searchInstances['local'] != 'undefined') {
            this.searchInstances['local'].stop();
        }
    },
    componentWillMount: function () {
        log('SearchList componentWillMount')
        // 初回のrenderのためにデータの初期化が必要
        this.format()
    },
    componentDidMount: function () {
        log('SearchList componentDidMount')
        this.start();
    },
    componentDidUpdate: function () {
        log('SearchList componentDidUpdate')
        var $searchResult = $(this.refs.searchResult.getDOMNode());
        log(this.props.target)
        if (this.props.target.message) {
            $searchResult.show().css('top', 0);
            $searchResult.css('opacity', 1);
        } else if (this.props.target.complete) {
            $searchResult.hide().css('top', $(window).height());
            $searchResult.css('opacity', 0);
            $searchResult.show().animate({'top': 0, 'opacity': 1}, 1000)
        }
//    log(this.refs.searchResult.getDOMNode())
//    $(this.refs.searchResult.getDOMNode()).css('height',0).css('height', $(window).height());
//    if(this.props.animation){
        // アニメーション用に透明度を初期化
//      $('.crosssearch').css({opacity: 0});
//    }
        // キーワードが変わっていたら再検索
        // もしくは検索エラーの場合
        if ((this.queryText != this.props.queryText) || (this.props.submit && this.props.target.error===true)) {
            this.start();
        }
    },
    componentWillUnmount: function () {
        // レンダリングをしないようにする
        this.stop();
    },
    clickHandler: function (e) {
        if (this.props.clickHandler) {
            e.preventDefault();
            var data = $(e.target).closest('.book').attr('data');
            if (data) {
                data = JSON.parse(data);
                $(this.refs.searchResult.getDOMNode()).fadeOut();
                this.stop();
                this.props.clickHandler(data);
            }
        }
    },
    closeHandler: function () {
        $(this.refs.searchResult.getDOMNode()).fadeOut();
        this.stop();
    },
    render: function () {
        var messageNode = null;
        if (this.props.target.message) {
            messageNode = React.createElement("p", {className: "searchMessage"}, this.props.target.message)
        }
        return (
            React.createElement("div", {className: "searchResult", ref: "searchResult"},
                React.createElement(BookList, {
                    books: this.props.target.books,
                    queryText: this.props.queryText,
                    clickHandler: this.clickHandler,
                    closeHandler: this.closeHandler
                }),
                messageNode
            )
        );
    }
});

var BookList = React.createClass({
    displayName: "BookList",
    render: function () {
        var bookNodes = this.props.books.map(function (book, i) {
            return (
                React.createElement(Book, {key: book.id, book: book, clickHandler: this.props.clickHandler})
            );
        }.bind(this));
        return (
            React.createElement("div", {className: "booklist"},
                React.createElement("div", {className: "booklistTitle"}, this.props.queryText, "の検索結果"),
                React.createElement("div", {className: "booklistClose", onClick: this.props.closeHandler}, "×"),
                bookNodes
            )
        );
    }
});
var Book = React.createClass({
    displayName: "Book",
    render: function () {
        return (
            React.createElement("div", {className: "book"},
                React.createElement("div", {className: "leftblock"},

                    React.createElement("div", {
                            href: "#", //this.props.book.url
                            target: "_blank",
                           //  onClick: this.props.clickHandler
                        },
                        React.createElement("img", {
                            id: 'image' + this.props.book.id,
                            className: "thumbnail",
                            src: "https://calil.jp/public/img/no-image/medium-noborder.gif"
                        })
                    ),
                    React.createElement("div", {
                        href: "#", //this.props.book.url
                        target: "_blank",
                        id: this.props.book.id,
                        dangerouslySetInnerHTML: {__html: this.props.book.title},
                        //onClick: this.props.clickHandler
                    })
                ),
                React.createElement("div", {
                    className: "stock",
                    id: 'stock' + this.props.book.id
                })
            )
        );
    }
});


if (typeof searchSetting != 'undefined') {
    React.render(
        React.createElement(Search, {searchSetting: searchSetting}),
        document.getElementById('searchBox')
    );
}
